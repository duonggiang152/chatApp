{"ast":null,"code":"var _jsxFileName = \"D:\\\\chatapp2\\\\client\\\\src\\\\components\\\\chatapp\\\\chatbox.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { SlideBar } from \"./slidebar\";\nimport { ChatContent } from \"./chatcontent\";\nimport { SizeScreenContext, ActiveChatContentMobileVersion } from \"./context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatApp() {\n  _s();\n\n  const TypeScreen = useContext(SizeScreenContext);\n  const [screenType, setScreenType] = useState(\"pc\");\n  const [showChatContentMobileVersion, setShowChatContentMobileVersion] = useState(false);\n\n  const checkType = () => {\n    if (window.innerWidth >= 610 && screenType !== \"pc\") setScreenType(\"pc\");else if (window.innerWidth < 610 && screenType !== \"mobile\") setScreenType(\"mobile\");\n  };\n\n  checkType();\n  useEffect(() => {\n    window.addEventListener('resize', checkType);\n  });\n\n  const controlMobileScreenChatContentfunc = () => {\n    setShowChatContentMobileVersion(true);\n  };\n\n  const activeSlideBar = () => {\n    setShowChatContentMobileVersion(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      overflow: \"hidden\",\n      display: \"flex\",\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(SizeScreenContext.Provider, {\n      value: screenType,\n      children: [/*#__PURE__*/_jsxDEV(ActiveChatContentMobileVersion.Provider, {\n        value: controlMobileScreenChatContentfunc,\n        children: /*#__PURE__*/_jsxDEV(SlideBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ChatContent, {\n        show: showChatContentMobileVersion,\n        backbtnactive: activeSlideBar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatApp, \"M0nlEnoUijHBhosjSKVKLDZNaVk=\");\n\n_c = ChatApp;\nexport { ChatApp };\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"sources":["D:/chatapp2/client/src/components/chatapp/chatbox.js"],"names":["useContext","useEffect","useState","SlideBar","ChatContent","SizeScreenContext","ActiveChatContentMobileVersion","ChatApp","TypeScreen","screenType","setScreenType","showChatContentMobileVersion","setShowChatContentMobileVersion","checkType","window","innerWidth","addEventListener","controlMobileScreenChatContentfunc","activeSlideBar","overflow","display","width"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,SAAQC,QAAR,QAAuB,YAAvB;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,SAAQC,iBAAR,EAA2BC,8BAA3B,QAAgE,WAAhE;;;AACA,SAASC,OAAT,GAAmB;AAAA;;AACf,QAAMC,UAAU,GAAGR,UAAU,CAACK,iBAAD,CAA7B;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACS,4BAAD,EAA+BC,+BAA/B,IAAkEV,QAAQ,CAAC,KAAD,CAAhF;;AACA,QAAMW,SAAS,GAAG,MAAM;AACpB,QAAIC,MAAM,CAACC,UAAP,IAAqB,GAAtB,IACIN,UAAU,KAAK,IADtB,EAC4BC,aAAa,CAAC,IAAD,CAAb,CAD5B,KAEK,IAAII,MAAM,CAACC,UAAP,GAAoB,GAArB,IACDN,UAAU,KAAK,QADjB,EAC2BC,aAAa,CAAC,QAAD,CAAb;AACnC,GALD;;AAMAG,EAAAA,SAAS;AACTZ,EAAAA,SAAS,CAAC,MAAM;AACba,IAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCH,SAAlC;AACF,GAFQ,CAAT;;AAGA,QAAMI,kCAAkC,GAAG,MAAM;AAC3CL,IAAAA,+BAA+B,CAAC,IAAD,CAA/B;AACL,GAFD;;AAGA,QAAMM,cAAc,GAAG,MAAM;AACzBN,IAAAA,+BAA+B,CAAC,KAAD,CAA/B;AACH,GAFD;;AAGA,sBACI;AAAK,IAAA,KAAK,EAAI;AAACO,MAAAA,QAAQ,EAAE,QAAX;AAAqBC,MAAAA,OAAO,EAAE,MAA9B;AAAsCC,MAAAA,KAAK,EAAE;AAA7C,KAAd;AAAA,2BACA,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,MAAA,KAAK,EAAIZ,UAArC;AAAA,8BACI,QAAC,8BAAD,CAAgC,QAAhC;AAAyC,QAAA,KAAK,EAAIQ,kCAAlD;AAAA,+BACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,WAAD;AAAa,QAAA,IAAI,EAAIN,4BAArB;AAAmD,QAAA,aAAa,EAAIO;AAApE;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GA9BQX,O;;KAAAA,O;AA+BT,SAAQA,OAAR","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport {SlideBar} from \"./slidebar\";\r\nimport {ChatContent} from \"./chatcontent\"\r\nimport {SizeScreenContext, ActiveChatContentMobileVersion} from \"./context\"\r\nfunction ChatApp() {\r\n    const TypeScreen = useContext(SizeScreenContext);\r\n    const [screenType, setScreenType] = useState(\"pc\");\r\n    const [showChatContentMobileVersion, setShowChatContentMobileVersion] = useState(false);\r\n    const checkType = () => {\r\n        if((window.innerWidth >= 610)\r\n            && screenType !== \"pc\") setScreenType(\"pc\")\r\n        else if((window.innerWidth < 610 )\r\n            && screenType !== \"mobile\") setScreenType(\"mobile\");\r\n    }\r\n    checkType();\r\n    useEffect(() => {\r\n       window.addEventListener('resize', checkType)\r\n    })\r\n    const controlMobileScreenChatContentfunc = () => {\r\n          setShowChatContentMobileVersion(true);\r\n    }\r\n    const activeSlideBar = () => {\r\n        setShowChatContentMobileVersion(false);\r\n    }\r\n    return (\r\n        <div style = {{overflow: \"hidden\", display: \"flex\", width: \"100%\"}}>\r\n        <SizeScreenContext.Provider value = {screenType} >\r\n            <ActiveChatContentMobileVersion.Provider value = {controlMobileScreenChatContentfunc}>\r\n                <SlideBar/>\r\n            </ActiveChatContentMobileVersion.Provider>\r\n            <ChatContent show = {showChatContentMobileVersion} backbtnactive = {activeSlideBar}/>\r\n        </SizeScreenContext.Provider>\r\n        </div>\r\n    )\r\n}\r\nexport {ChatApp}"]},"metadata":{},"sourceType":"module"}