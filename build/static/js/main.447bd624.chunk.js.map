{"version":3,"sources":["components/chatapp/avartar.js","components/chatapp/context.js","config/domain.js","controller/userController.js","controller/roomController.js","components/chatapp/userinfor.js","components/chatapp/friendchatlist.js","components/chatapp/typeslide.js","components/chatapp/message.js","components/chatapp/searchbox.js","components/chatapp/friendlist.js","components/chatapp/slidebar.js","components/chatapp/chatboxinfor.js","components/chatapp/chatinput.js","controller/socketIO.js","components/chatapp/messageroombox.js","components/chatapp/chatcontent.js","components/chatapp/dialog.js","components/chatapp/AvatarEditor.js","components/chatapp/chatbox.js","components/Login/loginform.js","components/Login/banner_circle_animation.js","components/Login/banner.js","components/Login/login.js","App.js","index.js"],"names":["avartarStyle","default","width","height","backgroundColor","borderRadius","default_small","Avartar","props","small","url","onClick","e","onFocus","onBlur","onFocusout","className","style","tabIndex","src","process","ResponsesiveContext","React","createContext","NotificationContext","ChatContext","DialogContext","ControleCurrenRoomContext","NewMessageContext","domain","User","userID","this","a","userName","fetch","method","credentials","then","res","status","Error","json","catch","err","user","avatar","getUserName","UserController","loginUser","Users","filter","length","push","userExist","i","addUser","Room","cbID","messages","members","room","membersRawInfo","member","Promise","all","map","memberRawInfo","getUserByID","nickName","membersInfo","offsetID","limit","currentNumberOfMessage","numberMessageMustGet","mmessage","index","lastMessage","query","mID","current","message","forEach","element","addMessage","console","log","isMessageExist","numberOffMessageMustGet","indexMessage","data","tail","unshift","RoomController","rooms","roomID","roomRawData","Notification","notificationValue","useContext","useState","click","setClick","typeSelect","clearUnreadNotification","setNotificationBoxStatus","btnfunc","setTimeout","state","unreadNotifications","UserInfor","setUserName","userinfoelement","useRef","dialogContext","history","useHistory","setAvatar","useEffect","getLoginUser","username","callAPI","relatedTarget","id","ref","show","clean","window","location","reload","number","isOpenNotificationBox","showMessageFunc","Content_Style","whiteSpace","textOverflow","overflow","ownStyle_friendchatlist","FriendChat","roomdetail","setRoomdetail","responsesiveContext","controleCurrenRoom","newMEssageContext","setData","getRoomByID","getMembers","getMessage","undefined","lastmessage","setup","profiID","profi","setCurrenOpenRoomID","screenType","setMobileModeOnChatbox","datetime","FriendChatList","styleComponentInline","setStyleComponentInline","setProfi","chatContext","animationactive","content","zIndex","roomsInfo","TypeSlide","notificationContext","textAlign","showChatboxfunc","ownStyle_message","FriendInvite","setStyle","userIDSend","userSend","headers","ntfID","isAccepted","acceptFriendRequest","body","JSON","stringify","AcceptFriendRequest","ID","Message","Notifications","type","typeNo","MessageBox","SearchBox","searchValue","setSearchValue","value","placeholder","onChange","target","haddlerChanging","ownStyle_friendlist","Friend","icon","sendFriendRequest","response","isFriend","isOnline","friendurl","class","friendRequest","smilarName","FriendList","friendSuggest","setFriendSuggest","checkFriend","friendID","route","friend","checkSentFriendRequest","sended","isUserOnline","listSocket","onSearchBoxChange","dommain","isfriend","isSentFriendRequest","update","mobileStyle","minWidth","maxWidth","maxHeight","padding","position","ContentChange","SlideBar","contentInside","setContenInside","ChatboxInfor","setUserID","roomName","setRoomName","currentContext","currenRoomID","setCurrentRoomID","avatarURL","setAvatarURL","currenOpenRoomID","users","Err","children","m_style","resize","ChatInput","boxChat","chatcontent","setChatcontent","setRoomID","currentRoom","messageData","focus","setInputFocus","onKeyPress","charCode","shiftKey","preventDefault","submitbtnfuc","press","onSubmit","name","temp","scrollHeight","on_Resize","socketIO","socket","connect","on","event","callback","removeAllListeners","socketio","TextMessage","_class_private","setURL","getAvatar","userURl","isYou","MessageRoomBox","setCurrentRoom","curretRoomContext","texmessagebox","setLoginUser","offSetID","setOffSetID","initMessage","reverse","setMessageData","listen","newMessageContext","setNewMessage","userId","data_in","scrollTop","calllAPI","loginuser","inputFocus","onScroll","offsetid","Element","ChatContent","showChatContent","setShowChatContent","classComponent","setClassComponent","responsiveContext","messageRoomBoxHeight","setMessageRoomBoxHeight","mobileProperties","slideBar","BackBtn","setMobileModeOnSlideBar","cursor","testsubmitbtn","temps","d","Date","dformat","getMonth","getDate","getFullYear","join","getHours","getMinutes","getSeconds","sucess","trgger","Dialog","active","hide","AvatarEditor","scale","setScale","urlDefault","setURLDefault","urlCrop","setURLCrop","setStatus","preventAction","setPreventAction","setEditorRef","ed","getImageScaledToCanvas","resolve","toBlob","blob","changeAvatar","formData","FormData","append","classBTN","image","border","color","rotate","accept","files","URL","createObjectURL","for","v","min","max","initialState","slidebar","actions","reducer","action","initialNotificaionContext","NotificationActions","reducerNotification","initNoti","noti","unreadNoti","notificationID","initChatContext","roomsMessage","chatContextActions","reducerContext","ChatApp","useReducer","ResponsesiveState","dispathResponsiveMethod","valueResponsiveContext","setPCMode","clear","NotificationState","dispathNotificationContext","valueNotificationContext","initUnreadNotification","addUnreadNotification","initNotification","notifications","addNotification","ChatContextState","dispathChatContext","valueChatContext","chatboxID","roomsmessage","addListMessage","messageList","concat","updateRoomInfo","roominfo","makeDate","str","match","yyyy","mm","dd","hh","ss","datemodifi","sort","b","DialogStatus","setDialogStatus","valueDialogContext","valueControlCurrenOpenRoom","checkType","document","documentElement","clientWidth","addEventListener","notification","valueContextNewMessage","Provider","display","MessageContext","Login","usernameInputElement","passwordInputElement","password","updateLoginMessage","URLSearchParams","MessageState","autocomplete","Register","verifyInputElement","registerForm","loginBtnOnClick","classList","add","remove","childNodes","postRegister","verifiPassword","updateRegisterMessage","userRegisterData","LoginForm","dispathMessageMethod","LoginMessage","RegisterMessage","canvasSize","mouse","x","y","Particle","radius","context","numberMobileCircle","radians","Math","random","PI","velocity","distanceFromCenter","lastmouse","date","frameDate","getTime","cos","sin","draw","beginPath","arc","fillStyle","fill","closePath","Banner_Circle_Animation","setReRender","previ","particals","handlerAniamtionFrame","canvasRef","Animate","canvas","ctx","getContext","fillRect","partical","requestAnimationFrame","getBoundingClientRect","left","right","top","bottom","clearRect","numberCircle","Init","cancelAnimationFrame","Banner","windowSize","setType","updateType","clientHeight","removeEventListener","App","path","component","exact","ReactDom","render","getElementById"],"mappings":"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","file":"static/js/main.447bd624.chunk.js","sourcesContent":["import \"./css/avatar.css\"\r\nconst avartarStyle = {\r\n    default : {\r\n        width : \"50px\",\r\n        height : \"50px\",\r\n        backgroundColor: \"#8a8883\",\r\n        borderRadius: \"50px\",\r\n    },\r\n    default_small: {\r\n        width : \"35px\",\r\n        height : \"35px\",\r\n        backgroundColor: \"#8a8883\",\r\n        borderRadius: \"50px\",\r\n    }\r\n}\r\n/**\r\n * \r\n * @return Avarter component \r\n */\r\nconst Avartar = (props) => {\r\n    if(props.small) {\r\n        if(!props.url) {\r\n            return (\r\n                <div onClick = {(e) => {\r\n                    if(props.onClick) props.onClick(e)\r\n                }}  onFocus ={(e) => {\r\n                    if(props.onFocus)\r\n                    props.onFocus(e)\r\n                }}  onBlur = {(e) => {\r\n                    if(props.onBlur)\r\n                    props.onBlur(e)\r\n                }} \r\n                onFocusout = {(e) => {\r\n                    if(props.onFocusout)\r\n                    props.onFocusout(e)\r\n                }}  className = \"avatar\" style = {avartarStyle.default_small} tabIndex= {-1}>\r\n                    <img src = {process.env.PUBLIC_URL + \"/avartardefault.png\"}></img>\r\n                </div>\r\n            )\r\n        }\r\n        if(props.url) {\r\n            return (\r\n                <div onClick = {(e) => {\r\n                    if(props.onClick) props.onClick(e)\r\n                }}  onFocus ={(e) => {\r\n                    if(props.onFocus)\r\n                    props.onFocus(e)\r\n                }}  onBlur = {(e) => {\r\n                    if(props.onBlur)\r\n                    props.onBlur(e)\r\n                }} \r\n                onFocusout = {(e) => {\r\n                    if(props.onFocusout)\r\n                    props.onFocusout(e)\r\n                }} className = \"avatar\" style = {avartarStyle.default_small} tabIndex= {-1}>\r\n                    <img src = {props.url}></img>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    else {\r\n        if(!props.url) {\r\n            return (\r\n                <div onClick = {(e) => {\r\n                    if(props.onClick)\r\n                    props.onClick(e)\r\n                }} onFocus ={(e) => {\r\n                    if(props.onFocus)\r\n                    props.onFocus(e)\r\n                }} \r\n                onBlur = {(e) => {\r\n                    if(props.onBlur)\r\n                    props.onBlur(e)\r\n                }}\r\n                onFocusout = {(e) => {\r\n                    if(props.onFocusout)\r\n                    props.onFocusout(e)\r\n                }}  className = \"avatar\" style = {avartarStyle.default} tabIndex= {-1}>\r\n                <img src = {process.env.PUBLIC_URL + \"/avartardefault.png\"}></img>\r\n                </div>\r\n            )\r\n        }\r\n        if(props.url)  {\r\n            return (\r\n                <div onClick = {(e) => {\r\n                    if(props.onClick)\r\n                    props.onClick(e)\r\n                }} onFocus ={(e) => {\r\n                    if(props.onFocus)\r\n                    props.onFocus(e)\r\n                }} \r\n                onBlur = {(e) => {\r\n                    if(props.onBlur)\r\n                    props.onBlur(e)\r\n                }}\r\n                onFocusout = {(e) => {\r\n                    if(props.onFocusout)\r\n                    props.onFocusout(e)\r\n                }}  className = \"avatar\" style = {avartarStyle.default} tabIndex= {-1}>\r\n                    <img src = {props.url}></img>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport {Avartar}","import React from 'react'\r\n/**\r\n * store globle context variable\r\n * \r\n * state {\r\n * \r\n *  screenType,\r\n * \r\n *  mobileProperties: {\r\n *      slidebar,\r\n *      content\r\n *  }\r\n * }\r\n * \r\n *  setPCMode               : () =>,\r\n * \r\n *  setMobileModeOnSlideBar : () =>,\r\n * \r\n *  setMobileModeOnChatbox  : () =>\r\n *\r\n * Default value undefine\r\n */\r\nconst ResponsesiveContext = React.createContext()\r\n/** \r\n* initialNotificaionContext = {\r\n*     isOpenNotificationBox: false\r\n* }\r\n*/\r\nconst NotificationContext = React.createContext()\r\nconst ChatContext = React.createContext()\r\nconst DialogContext = React.createContext()\r\nconst ControleCurrenRoomContext = React.createContext()\r\nconst NewMessageContext         = React.createContext()\r\nexport { ResponsesiveContext, NotificationContext, ChatContext, DialogContext, ControleCurrenRoomContext, NewMessageContext}","// const domain = \"http://localhost:80\"\r\nconst domain = \"/api\"\r\nexport default domain","import domain from \"../config/domain.js\"\r\nclass User {\r\n  constructor(userID) {\r\n    this.userID = userID\r\n  }\r\n\r\n  async getUserName() {\r\n    if (this.userName !== null && this.userName) return this.userName\r\n    const user = await fetch(domain + \"/info/\" + `${this.userID}`, {\r\n      method: \"GET\",\r\n      // TODO\r\n      credentials: \"same-origin\"\r\n    })\r\n      .then(res => {\r\n        if (res.status !== 200) throw new Error()\r\n        return res.json()\r\n      })\r\n      .catch(err => new Error())\r\n    if (user instanceof Error) {\r\n      return null\r\n    }\r\n    this.userName = user.userName\r\n    this.avatar   = user.avatar\r\n    return this.userName\r\n  }\r\n  async getAvatar() {\r\n    this.getUserName()\r\n    return this.avatar\r\n  }\r\n}\r\n\r\nclass UserController {\r\n  static Users = []\r\n  static loginUser = null\r\n  static async getLoginUser() {\r\n    if (this.loginUser) return this.loginUser\r\n    return await fetch(domain + \"/info/profi\", {\r\n      method: \"GET\",\r\n      // TODO\r\n      credentials: \"same-origin\"\r\n    })\r\n      .then(async res => {\r\n        if (res.status !== 200) throw new Error()\r\n\r\n        const user = res.json()\r\n        this.loginUser = user\r\n        return user\r\n      })\r\n      .catch(err => null)\r\n  }\r\n  static clean() {\r\n    this.Users = []\r\n  }\r\n  static async addUser(userID) {\r\n    if (this.Users.filter(user => user.userID === userID).length !== 0) {\r\n      throw new Error(\"User was already add before\")\r\n    }\r\n    const user = new User(userID)\r\n    await user.getUserName()\r\n    this.Users.push(user)\r\n  }\r\n  static async getUserByID(userID) {\r\n    let userExist = false\r\n    for (let i = 0; i < this.Users.length; i++) {\r\n      if (this.Users[i].userID === userID) {\r\n        userExist = true\r\n        break\r\n      }\r\n    }\r\n    if (!userExist) {\r\n      await this.addUser(userID)\r\n    }\r\n    return this.Users.filter(user => user.userID === userID)[0]\r\n  }\r\n}\r\nexport default UserController\r\nexport { User }","import domain from \"../config/domain\"\r\nimport UserController from \"./userController\"\r\nclass Room {\r\n  constructor(cbID) {\r\n    if (!cbID) throw new Error(\"ChatBox ID must be provide\")\r\n    this.cbID = cbID\r\n    this.messages = []\r\n    this.members = []\r\n  }\r\n  async getMembers() {\r\n    if (this.members.length === 0) {\r\n      const room = await fetch(domain + \"/room/room-member/\" + `${this.cbID}`, {\r\n        method: \"GET\",\r\n        // To DI\r\n        credentials: \"same-origin\"\r\n      })\r\n        .then(async res => {\r\n          if (res.status !== 200) throw new Error()\r\n          return await res.json()\r\n        })\r\n        .catch(err => {\r\n          throw new Error()\r\n        })\r\n      const membersRawInfo = room.member\r\n      let membersInfo = await Promise.all(membersRawInfo.map(async (memberRawInfo) => {\r\n        const user = await UserController.getUserByID(memberRawInfo.userID)\r\n        const userName = await user.getUserName()\r\n        return {\r\n          userID: memberRawInfo.userID,\r\n          userName: userName,\r\n          nickName: memberRawInfo.nickName\r\n        }\r\n      }))\r\n      this.members = membersInfo\r\n    }\r\n    return this.members\r\n  }\r\n  async getMessage(offsetID, limit) {\r\n    if (!offsetID) {\r\n      const currentNumberOfMessage = this.messages.length\r\n      const numberMessageMustGet = limit - currentNumberOfMessage\r\n      if (numberMessageMustGet <= 0) {\r\n        return this.messages.filter((mmessage, index) => {\r\n          if(index < limit) return true\r\n          return false\r\n        })\r\n      }\r\n      const lastMessage = this.messages[this.messages.length - 1]\r\n      const query = (!lastMessage ? `cbid=${this.cbID}&limit=${numberMessageMustGet < 100 ? 100 : numberMessageMustGet}` : `cbid=${this.cbID}&offsetid=${lastMessage.mID}&limit=${numberMessageMustGet < 100 ? 100 : numberMessageMustGet}`)\r\n      const current= this\r\n      await fetch(domain +\r\n        \"/message/get-message/?\" +\r\n        query,\r\n        {\r\n          method: \"GET\",\r\n          credentials: \"same-origin\"\r\n        })\r\n        .then(message => message.json())\r\n        .then(message => {\r\n          message.message.forEach(element => {\r\n            current.addMessage(element)\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.log(err)\r\n        })\r\n        return current.messages.filter((element, index) => {\r\n          if(index < limit) return true\r\n          return false\r\n        })\r\n      \r\n    }\r\n    else {\r\n      /* Find messageID, if it not exist in currently client store, throw new Err\r\n         Case list message in the client must be continous to easy to get mesage in the latter without have to call api to client\r\n      */\r\n     let isMessageExist = false\r\n     let numberOffMessageMustGet = 0\r\n     let current= this\r\n     let indexMessage = 0\r\n     for(let i =0 ; i < this.messages.length; i++) {\r\n       if(this.messages[i].mID === offsetID) {\r\n         indexMessage = i\r\n         isMessageExist = true\r\n         numberOffMessageMustGet = limit - i - 1\r\n         break\r\n       }\r\n     }\r\n     if(!isMessageExist) throw new Error(\"You must call new message from message you got\")\r\n     const query = `cbid=${this.cbID}&offsetid=${offsetID}&limit=${numberOffMessageMustGet < 100 ? 100 : numberOffMessageMustGet }`\r\n     return await fetch(domain +\r\n      \"/message/get-message/?\" +\r\n      query,\r\n      {\r\n        method: \"GET\",\r\n        credentials: \"same-origin\"\r\n      })\r\n      .then(async message => {\r\n        const data = await message.json()\r\n\r\n       \r\n        return data.message\r\n      })\r\n      .then(message => {\r\n        message.forEach(element => {\r\n          current.addMessage(element)\r\n        });\r\n        return current.messages.filter((element, index) => {\r\n          if( indexMessage <index && index < limit + index) return true\r\n          return false\r\n        })\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n    }\r\n  }\r\n  addMessage( message, tail = false) {\r\n    for(let i= 0 ; i< this.messages.length; i++) {\r\n      if(message.mID && this.messages[i].mID && message.mID === this.messages[i].mID) {\r\n        return\r\n      }\r\n    }\r\n    if (!tail) {\r\n      this.messages.push(message)\r\n      return\r\n    }\r\n    this.messages.unshift(message)\r\n  }\r\n\r\n}\r\nclass RoomController {\r\n  static rooms = []\r\n  static clean() {\r\n    this.rooms = []\r\n  }\r\n  static async getRoomByID(roomID) {\r\n    for(let i = 0; i < this.rooms.length; i++) {\r\n        if(this.rooms[i].cbID === roomID) {\r\n          return this.rooms[i]\r\n        }\r\n    }\r\n    return fetch(domain + \"/room/get-room/\" +`${roomID}`,\r\n                {\r\n                  method: \"GET\",\r\n                  credentials: \"same-origin\"\r\n                })\r\n                .then(res=>res.json())\r\n                .then(roomRawData=> {\r\n                  if(!roomRawData.room) return null\r\n                  const room = new Room(roomRawData.room.cbID)\r\n                  this.rooms.push(room)\r\n                  return room\r\n                })\r\n  }\r\n}\r\nexport default RoomController","/**\r\n * module dependencies\r\n */\r\nimport { useContext, useEffect, useRef, useState } from 'react'\r\nimport { Avartar } from \"./avartar\"\r\n// css\r\nimport \"./css/userinfor.css\"\r\n// context\r\nimport { DialogContext, NotificationContext } from './context'\r\nimport { useHistory } from 'react-router-dom'\r\nimport domain from '../../config/domain'\r\nimport UserController from '../../controller/userController'\r\nimport RoomController from '../../controller/roomController'\r\n/**\r\n * Create a Notification component witch take controll when the notification come\r\n * @param {object} props \r\n * @returns \r\n */\r\nconst Notification = (props) => {\r\n    const notificationValue = useContext(NotificationContext)\r\n    const [click, setClick] = useState(false);\r\n    if (props.typeSelect === \"message\" || props.typeSelect === \"messageactived\") {\r\n        if (!click) setClick(true)\r\n    } else {\r\n        if (click) setClick(false)\r\n    }\r\n    const styleOnClick = {\r\n        backgroundColor: \"#03bafc\",\r\n    }\r\n    const backgroundNumber = {\r\n        backgroundColor: \"black\"\r\n    }\r\n    return (\r\n        <div className={`${(() => { return (props.className ? props.className : \"notification\") })()}`} style={(click ? styleOnClick : {})} onClick={\r\n            () => {\r\n                notificationValue.clearUnreadNotification();\r\n                notificationValue.setNotificationBoxStatus(true)\r\n                setClick(true);\r\n                if (props.typeSelect !== \"message\" && props.typeSelect !== \"messageactived\") {\r\n                    props.btnfunc(\"message\");\r\n                    setTimeout(() => {\r\n                        props.btnfunc(\"messageactived\")\r\n                    }, 200)\r\n                }\r\n            }}>\r\n            <i className={\"fas fa-user-friends\"} ></i>\r\n            {notificationValue.state.unreadNotifications.length !== 0 &&\r\n                <div style={(click ? backgroundNumber : {})}>\r\n                    <p>{notificationValue.state.unreadNotifications.length}</p>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nfunction UserInfor(props) {\r\n    const notificationValue = useContext(NotificationContext)\r\n    const [userName, setUserName] = useState(\"\");\r\n    const userinfoelement = useRef()\r\n    const dialogContext = useContext(DialogContext)\r\n    const history = useHistory()\r\n    const [avatar, setAvatar] = useState(\"\")\r\n    useEffect(() => {\r\n        const callAPI = async () => {\r\n            let user = await UserController.getLoginUser()\r\n                            .catch(err=> {\r\n                                console.log(err)\r\n                            })\r\n            if(!user) return\r\n            let username = user.userName\r\n            setAvatar(user.avatar)\r\n            setUserName(username)\r\n        }\r\n        callAPI()\r\n\r\n    }, [props])\r\n    const onBlur = (e) => {\r\n        if (!e || !e.relatedTarget) {\r\n            userinfoelement.current.className = 'user-menu'\r\n            return\r\n        }\r\n        if (e.relatedTarget.className === 'user-menu-item' || e.relatedTarget.className === 'user-menu user-menu-active')\r\n            return\r\n        userinfoelement.current.className = 'user-menu'\r\n    }\r\n    return (\r\n        <div id='user-info'>\r\n            <div onFocus={() => {\r\n                userinfoelement.current.className = 'user-menu user-menu-active'\r\n            }} ref={userinfoelement} className='user-menu' tabIndex={1} onBlur={(e) => { onBlur(e) }}>\r\n                <ul tabIndex>\r\n                    <li className='user-menu-item' onClick={() => {\r\n                        dialogContext.show()\r\n                    }}> Change Avatar </li>\r\n                    <li className='user-menu-item' onClick={async () => {\r\n                        UserController.clean()\r\n                        RoomController.clean()\r\n                        await fetch(domain + \"/logout\",\r\n                            {\r\n                                method: 'POST',\r\n                                credentials: 'same-origin',\r\n                            })\r\n                            .then(res => {\r\n                                window.location.reload()\r\n                                if (res.status === 200) history.push(\"/login\")\r\n                            })\r\n                            .catch(err => {\r\n                                console.log(err)\r\n                            })\r\n                    }} > Log out</li>\r\n                </ul>\r\n            </div>\r\n            <Avartar url = {avatar} onFocus={() => {\r\n                userinfoelement.current.className = 'user-menu user-menu-active'\r\n            }} onBlur={(e) => {\r\n                onBlur(e)\r\n            }}\r\n            />\r\n            <h3 className='user-name'>{userName}</h3>\r\n            <Notification className='notification' number={notificationValue.state.isOpenNotificationBox} btnfunc={props.showMessageFunc} {...props} />\r\n        </div>\r\n    )\r\n}\r\nexport { UserInfor }","import React, { useState, useContext, useEffect } from 'react'\r\nimport \"./css/friendchatlist.css\"\r\nimport { Avartar } from './avartar'\r\nimport { ResponsesiveContext, ChatContext, ControleCurrenRoomContext, NewMessageContext } from './context'\r\nimport UserController from '../../controller/userController'\r\nimport RoomController from '../../controller/roomController'\r\nconst Content_Style = {\r\n    whiteSpace: \"nowrap\",\r\n    textOverflow: \"ellipsis\",\r\n    overflow: \"hidden\"\r\n}\r\nlet ownStyle_friendchatlist = {\r\n\r\n}\r\nfunction FriendChat(props) {\r\n    /**room detail\r\n     * {\r\n     * cbID\r\n     *  members: [{\r\n     *      id:\r\n     *      name:\r\n     *      avatar\r\n     * }]\r\n     * }\r\n     */\r\n    const [roomdetail, setRoomdetail] = useState({})\r\n    // for access responsiveContext\r\n    const responsesiveContext = useContext(ResponsesiveContext)\r\n    const controleCurrenRoom = useContext(ControleCurrenRoomContext)\r\n    const newMEssageContext = useContext(NewMessageContext)\r\n    const [data, setData] = useState([])\r\n    useEffect(() => {\r\n        const setup = async () => {\r\n            RoomController.getRoomByID(props.cbID)\r\n                .then(async room => {\r\n                    const members = await room.getMembers()\r\n                    \r\n                    const data = await Promise.all(members.map((async member => {\r\n                        return await UserController.getUserByID(member.userID)\r\n                    })))\r\n                    // console.log(data)\r\n                    setData(data)\r\n                    let lastMessage = await room.getMessage(undefined, 1)\r\n                    if(lastMessage && lastMessage.length !== 0) {\r\n                        lastMessage = lastMessage[0]\r\n                        const user = await UserController.getUserByID(lastMessage.userID)\r\n                        const userName = await user.getUserName()\r\n                        lastMessage.userName = userName\r\n                    }\r\n                    // console.log(lastMessage[0])\r\n                    // if(res.message){\r\n                    //     const [_, yyyy, mm, dd, hh, min, ss] = res.message[0].datetime.match(/(\\d{4})-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/);\r\n                    //     const date1 = new Date(yyyy, mm - 1, dd, hh, min, ss)\r\n                    //     const date2 = new Date()\r\n                    //     let result = \"\"\r\n                    //     if(date1.getFullYear() !== date2.getFullYear()) result = date1.getFullYear()\r\n                    //     else if(date1.getMonth() !== date2.getMonth()) result = date1.getMonth()\r\n                    //     else if(date1.getDay() !== date2.getDay()) result = date1.getDay()\r\n                    //     else result = date1.getHours + \":\"+ date1.getMinutes + \":\"+date1.getSeconds()\r\n                    // }\r\n                    // return res.message[0]\r\n                    setRoomdetail({\r\n                        cbID: props.cbID,\r\n                        members: data,\r\n                        lastmessage: lastMessage\r\n                    })\r\n\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                })\r\n        }\r\n        setup()\r\n    }, [newMEssageContext])\r\n    let user = {}\r\n    let profiID = props.profi.id\r\n    try {\r\n        user = data[0].userID === profiID ? data[1] : data[0]\r\n\r\n    }\r\n    catch (err) {\r\n\r\n    }\r\n    // console.log(profiID)\r\n    if (data.length === 0) return null\r\n    if (profiID)\r\n        return (\r\n            <article onClick={\r\n                () => {\r\n                    controleCurrenRoom.setCurrenOpenRoomID(props.cbID)\r\n                    if (responsesiveContext.state.screenType === \"mobile\") {\r\n                        responsesiveContext.setMobileModeOnChatbox()\r\n\r\n                    }\r\n                }\r\n            } tabIndex>\r\n                <Avartar small url={user.avatar} />\r\n                <div className={\"tittle-contentchat\"}>\r\n                    {roomdetail && roomdetail.members && roomdetail.members.length >= 2 && profiID ?\r\n                        <h3 className={\"tittle\"}>{data[0].userID === profiID ? data[1].userName : data[0].userName}</h3> : \"\"\r\n                    }\r\n                    {\r\n                        roomdetail && roomdetail.lastmessage ?\r\n                            <div className={\"contentchat\"}>\r\n                                <p>{roomdetail.lastmessage.userName}</p>\r\n                                <p style={Content_Style}>{roomdetail.lastmessage.message}</p>\r\n                                <p>{roomdetail.lastmessage.datetime}</p>\r\n                            </div> : \"\"\r\n\r\n                    }\r\n\r\n                </div>\r\n            </article>\r\n        )\r\n}\r\nfunction FriendChatList(props) {\r\n    const [styleComponentInline, setStyleComponentInline] = useState(ownStyle_friendchatlist);\r\n    const [profi, setProfi] = useState()\r\n    const chatContext = useContext(ChatContext)\r\n    let animationactive = \"friend-chat-list\";\r\n    if (props.content === \"chat\") {\r\n        animationactive = \"friend-chat-list active\";\r\n    }\r\n    else if (props.content === \"chatactived\"\r\n        && styleComponentInline.zIndex !== \"1\") {\r\n        ownStyle_friendchatlist = {\r\n            zIndex: \"1\",\r\n        }\r\n        setStyleComponentInline(ownStyle_friendchatlist)\r\n    }\r\n    else if (props.content !== \"chat\"\r\n        && props.content !== \"chatactived\"\r\n        && ownStyle_friendchatlist.zIndex === \"1\") {\r\n        setTimeout(\r\n            () => {\r\n                ownStyle_friendchatlist = {\r\n                };\r\n                setStyleComponentInline(ownStyle_friendchatlist);\r\n            }, 150)\r\n    }\r\n    useEffect( () => {\r\n        const callAPI = async () => {\r\n            // update userID\r\n            let user = await UserController.getLoginUser()\r\n            if (!user) user = {}\r\n            setProfi(user)\r\n        }\r\n        callAPI()\r\n\r\n    }, [])\r\n    return (\r\n        <div style={styleComponentInline} className={animationactive}>\r\n            {profi && profi.id ?\r\n                chatContext.state.roomsInfo.map(data => {\r\n                    return <FriendChat {...data} profi={profi} />\r\n                }) : \"\"\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\nexport { FriendChatList }","import {useContext, useState} from 'react'\r\nimport { NotificationContext } from './context';\r\nimport \"./css/typeslide.css\"\r\n\r\nfunction TypeSlide(props) {\r\n    const notificationContext = useContext(NotificationContext)\r\n    const [click, setClick] = useState(0);\r\n    if(props.typeSelect === \"message\") {\r\n        if(click !== -1) setClick(-1);\r\n    }\r\n    const clickChat = () => {\r\n      \r\n        setClick(0)\r\n    }\r\n    const clickFriend = () => {\r\n        \r\n        setClick(1)\r\n    }\r\n    return (\r\n        <div id = {\"type-slide\"}>\r\n            <div>\r\n                <h3 className = {(click === 0 ? \"active\" : \"\" )} style = {{textAlign: \"center\"}}\r\n                onClick = {() => {\r\n                    notificationContext.setNotificationBoxStatus(false)\r\n                    if(props.typeSelect !== \"chat\" && props.typeSelect !== \"chatactived\") {\r\n                        props.showChatboxfunc(\"chat\");\r\n                        setTimeout(() => {\r\n                            props.showChatboxfunc(\"chatactived\");\r\n                        },200)\r\n                        clickChat(0);\r\n                    }\r\n                }}>Chat</h3>\r\n            </div>\r\n            <div>\r\n                <h3 className = {(click === 1 ? \"active\" : \"\" )} style = {{textAlign: \"center\"}}\r\n                onClick = {() => {\r\n                    notificationContext.setNotificationBoxStatus(false)\r\n                    if(props.typeSelect !== \"friendlist\" && props.typeSelect !== \"friendlistactived\") {\r\n                        props.showChatboxfunc(\"friendlist\");\r\n                        setTimeout(() => {\r\n                            props.showChatboxfunc(\"friendlistactived\");\r\n                        },200)\r\n                    }\r\n                    clickFriend();\r\n                }}>Friend</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport {TypeSlide}","import { useState, useEffect, useContext } from \"react\";\r\nimport \"./css/message.css\"\r\nimport \"./css/friendinvite.css\"\r\n\r\nimport { NotificationContext } from \"./context\"\r\nimport domain from \"../../config/domain\";\r\nimport UserController from \"../../controller/userController\";\r\nlet ownStyle_message = {\r\n\r\n}\r\nfunction FriendInvite(props) {\r\n    const [data, setData] = useState();\r\n    const [style, setStyle] = useState(\"fas fa-check notsend\")\r\n    useEffect( () => {\r\n       const callAPI = async () => {\r\n        let id = props.userIDSend || props.userSend\r\n        // if (!id) {\r\n        //     id = props.userIDSend\r\n        // }\r\n        // if (data) return\r\n        await fetch(domain + \"/info/\" + `${id}`,\r\n            {\r\n                method: 'GET',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => res.json())\r\n            .then(async data => {\r\n                setData(data)\r\n                await fetch(domain + \"/isacceptfriendrequest/\" + `${props.ntfID}`,\r\n                    {\r\n                        method: 'GET',\r\n                        credentials: 'same-origin',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        }\r\n                    })\r\n                    .then(res => res.json())\r\n                    .then(data => {\r\n                        if (data.isAccepted) setStyle(\"fas fa-check notsent\")\r\n                    })\r\n            })\r\n            .catch(err => {\r\n                setData(null)\r\n            })\r\n       }\r\n       callAPI()\r\n    }, [props.ntfID])\r\n    const acceptFriendRequest = async () => {\r\n        if (style === \"fas fa-check notsent\") return\r\n        const body = {\r\n            'ntfID': props.ntfID\r\n        }\r\n        await fetch(domain + \"/acceptfriendrequest\",\r\n            {\r\n                method: 'POST',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(body)\r\n            })\r\n            .then(async res => {\r\n                if (res.status !== 200) return\r\n                else {\r\n                    setStyle('fas fa-check notsent')\r\n                    return\r\n                }\r\n            })\r\n            .catch(err => {\r\n\r\n            })\r\n    }\r\n    if (!data) {\r\n        return (null)\r\n    }\r\n    if (!data.userName) data.userName = props.userName\r\n    return <div className=\"friend-invite\">\r\n        <p>Nhận được 1 lời kết bạn từ {data.userName}</p>\r\n        <div>\r\n            <i onClick={() => {\r\n                acceptFriendRequest()\r\n            }} className={style}></i>\r\n        </div>\r\n    </div>\r\n}\r\nfunction AcceptFriendRequest(props) {\r\n    const [data, setData] = useState();\r\n    const ID = props.userIDSend || props.userSend\r\n    useEffect(() => {\r\n        const callAPI = async () => {\r\n            const data = await UserController.getUserByID(ID)\r\n            setData(data)\r\n        }\r\n        callAPI()\r\n    }, [props])\r\n    if (!data) {\r\n        return (null)\r\n    }\r\n    return <div className=\"friend-invite\">\r\n        <p>{data.userName} đã chấp nhận lời mời kết bạn của bạn</p>\r\n    </div>\r\n}\r\nfunction Message(props) {\r\n    const notificationContext = useContext(NotificationContext)\r\n    const data = notificationContext.state.Notifications\r\n    return (\r\n        <>\r\n            {\r\n                data.map(element => {\r\n                    if (element.type === 0 || element.typeNo === 0)\r\n                        return <FriendInvite {...element} />\r\n                    else if (element.type === 1 || element.typeNo === 1) {\r\n                        return <AcceptFriendRequest {...element} />\r\n                    }\r\n                    else {\r\n                        return (null)\r\n                    }\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nfunction MessageBox(props) {\r\n    const [styleComponentInline, setStyleComponentInline] = useState(ownStyle_message);\r\n    let animationactive = \"message\";\r\n    if (props.content === \"message\") {\r\n        animationactive = \"message active\"\r\n    }\r\n    else if (props.content === \"messageactived\"\r\n        && styleComponentInline.zIndex !== \"1\") {\r\n        ownStyle_message = {\r\n            zIndex: \"1\",\r\n        }\r\n        setStyleComponentInline(ownStyle_message)\r\n    }\r\n    else if (props.content !== \"message\"\r\n        && props.content !== \"messageactived\"\r\n        && ownStyle_message.zIndex === \"1\") {\r\n        setTimeout(\r\n            () => {\r\n                ownStyle_message = {\r\n                };\r\n                setStyleComponentInline(ownStyle_message);\r\n            }, 150)\r\n    }\r\n    // setup socketIO listener to get new message\r\n    return (\r\n        <div style={styleComponentInline} className={animationactive}>\r\n            <Message {...props} />\r\n        </div>\r\n    )\r\n}\r\nexport { MessageBox }","import {useState} from 'react'\r\nimport \"./css/searchbox.css\"\r\nfunction SearchBox(props) {\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n    const Update = (value) => {\r\n        if(props.haddlerChanging)\r\n        props.haddlerChanging(value)\r\n        setSearchValue(value);\r\n    }\r\n    return (\r\n        <div className = {\"search-box\"}>\r\n            <input value = {searchValue} type = {\"text\"} placeholder = {(props.placeholder ? props.placeholder : \"Bạn bè\")} onChange = {(e) => {\r\n                Update(e.target.value)\r\n            }}/>\r\n        </div>\r\n    )\r\n}\r\nexport {SearchBox}","import {useState, useRef} from 'react'\r\nimport \"./css/friendlist.css\";\r\nimport { SearchBox } from './searchbox'\r\nimport {Avartar} from \"./avartar\"\r\nimport dommain   from \"../../config/domain\"\r\nimport domain from '../../config/domain';\r\nlet ownStyle_friendlist = {\r\n\r\n}\r\nfunction Friend(props) {\r\n    const icon = useRef(null)\r\n    const sendFriendRequest = async (id) => {\r\n        const route = domain + '/friendrequest'\r\n        const body = {\r\n            userID: id\r\n        }\r\n        await fetch(route, {\r\n            method: 'POST',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body:JSON.stringify(body)\r\n        })\r\n        .then(response => {\r\n            if(response.status === 200) {\r\n                icon.current.className = \"notonline fa fa-solid fa-user\"\r\n            }\r\n        })\r\n    }\r\n    if(props.err) {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n    if(props.isFriend) {\r\n        if(props.isOnline) {\r\n            return (\r\n                <div className = {\"friend\"}>\r\n                    <Avartar small url = {`${props.friendurl}`} />\r\n                    <h3>{props.username}</h3>\r\n                    <i class=\"online fa fa-solid fa-circle\"></i>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div className = {\"friend\"}>\r\n                <Avartar small url = {`${props.friendurl}`} />\r\n                <h3>{props.username}</h3>\r\n                <i class=\"notonline fa fa-solid fa-circle\"></i>\r\n            </div>\r\n        )\r\n    }\r\n    if(!props.friendRequest) {\r\n        return (\r\n            <div className = {\"friend\"}>\r\n                <Avartar small url = {`${props.friendurl}`} />\r\n                <h3>{props.username}</h3>\r\n                <i onClick={() => {\r\n                    sendFriendRequest(props.id)\r\n                }} ref={icon} class=\"online fa fa-solid fa-user\"></i>\r\n\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div className = {\"friend\"}>\r\n                <Avartar small url = {`${props.friendurl}`} />\r\n                <h3>{props.username}</h3>\r\n                <i ref = {icon} class=\"notonline fa fa-solid fa-user\"></i>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// private variable\r\n/**\r\n *  similarName for checking if the response was usefull or not. If the smilarName was change the response will not display\r\n */ \r\nlet smilarName = \"\"\r\n/**\r\n * Generate a box which searching for adding a new friend\r\n * @param {*} props \r\n * @returns \r\n */\r\nfunction FriendList(props) {\r\n    const [styleComponentInline, setStyleComponentInline] = useState(ownStyle_friendlist);\r\n    const [friendSuggest, setFriendSuggest]               = useState([])\r\n    let animationactive = \"friendlist\";\r\n    if(props.content === \"friendlist\") {\r\n        animationactive = \"friendlist active\"\r\n    }\r\n    else if(props.content === \"friendlistactived\" \r\n    && styleComponentInline.zIndex !== \"1\") {\r\n        ownStyle_friendlist = {\r\n            zIndex: \"1\",\r\n        }\r\n        setStyleComponentInline(ownStyle_friendlist)\r\n    }\r\n    else if(props.content !== \"friendlist\" \r\n    && props.content !== \"friendlistactived\"\r\n    && ownStyle_friendlist.zIndex === \"1\") {\r\n        setTimeout(\r\n            () => {\r\n                ownStyle_friendlist = {\r\n                };\r\n                setStyleComponentInline({});\r\n            }, 150)\r\n    }\r\n    /**\r\n     * return null if got err\r\n     * return boolean\r\n     * @param {string} friendID \r\n     */\r\n    const checkFriend = async (friendID) => {\r\n        const route  = domain + '/isfriend' +`/${friendID}`\r\n        const friend = await fetch(route, \r\n            {\r\n                method: 'GET',\r\n                credentials: 'same-origin',\r\n            })\r\n         .then(async response => {\r\n             if(response.status === 404) {\r\n                 return null\r\n             }\r\n             response = await response.json()\r\n             return response[0].friend\r\n         })\r\n         .catch(err => {\r\n             return null\r\n         })\r\n         return friend\r\n    }\r\n    /**\r\n     * check if user sent request to this user\r\n     * return null if got err\r\n     * return boolean\r\n     * @param {string} friendID \r\n     */\r\n    const checkSentFriendRequest = async (friendID) => {\r\n        const route = domain + '/issendedfriendrequest' +`/${friendID}`\r\n        const friend = await fetch(route,\r\n            {\r\n                method: 'GET',\r\n                credentials: 'same-origin'\r\n            })\r\n            .then(async response => {\r\n                if(response.status === 404) {\r\n                    return null\r\n                }\r\n                response =  await response.json()\r\n                return response.sended\r\n            })\r\n            .catch(err => {\r\n                return null\r\n            })\r\n        return friend\r\n    }\r\n    const isUserOnline = async (friendID) => {\r\n        const route = domain + '/isonline' +`/${friendID}`\r\n        return await fetch(route,\r\n            {\r\n                method: 'GET',\r\n                credentials: 'same-origin'\r\n            })\r\n            .then(async response => {\r\n                if(response.status === 404) {\r\n                    return null\r\n                }\r\n                response = await response.json()\r\n                if(response.listSocket.length === 0 ){\r\n                    return false\r\n                }\r\n                return true\r\n            })\r\n    }\r\n    // function for handle event when searchBox value change\r\n    const onSearchBoxChange = async (value) => {\r\n        // update the similarName cheking variable\r\n        try {\r\n            if(value === smilarName) return\r\n            smilarName = value\r\n            // stating request\r\n            const route = dommain + `/findsimilarname/${value}/0/30`\r\n            await fetch(route,\r\n                {\r\n                method: 'GET'\r\n                })\r\n            .then(response => response.json())\r\n            .then( async (data) => {\r\n                if(value === smilarName) {\r\n                    \r\n                    const update =await Promise.all(data.map(async (user) => {\r\n                        const isfriend = await checkFriend(user.id)\r\n                        if(isfriend === null) {\r\n                            return {\r\n                                err: true\r\n                            }\r\n                        }\r\n                        if(isfriend) {\r\n                            const isOnline = await isUserOnline(user.id)\r\n                            return {\r\n                                isFriend: true,\r\n                                id: user.id,\r\n                                friendurl: \"\",\r\n                                username:  user.userName,\r\n                                isOnline : isOnline\r\n                            }\r\n                        }\r\n                        else {\r\n                            const isSentFriendRequest = await checkSentFriendRequest(user.id)\r\n                            if(isSentFriendRequest === null) {\r\n                                return {\r\n                                    err: true\r\n                                }\r\n                            }\r\n                            return {\r\n                                id: user.id,\r\n                                friendurl: \"\",\r\n                                username:  user.userName,\r\n                                friendRequest : isSentFriendRequest\r\n                            }\r\n                        }\r\n                        \r\n                    }))\r\n                    setFriendSuggest(update)\r\n                    \r\n                    }       \r\n            })\r\n        } catch(err) {\r\n            console.log(err)\r\n        } \r\n    }\r\n    return (\r\n        <div style = {styleComponentInline} className = {animationactive}>\r\n            <SearchBox haddlerChanging = {(value) => onSearchBoxChange(value)}/>\r\n           {friendSuggest.map(element => {\r\n               return <Friend {...element} />\r\n           })}\r\n        </div>\r\n    )\r\n}\r\nexport {FriendList}","/**\r\n * Module dependencies\r\n */\r\n// react hook\r\nimport React,{useState , useContext } from 'react'\r\n// css\r\nimport \"./css/slidebar.css\"\r\nimport \"./css/changecontent.css\"\r\n// react component\r\nimport { UserInfor} from \"./userinfor\"\r\n\r\nimport { FriendChatList } from './friendchatlist'\r\nimport { TypeSlide } from './typeslide'\r\nimport { MessageBox } from './message'\r\nimport { FriendList } from './friendlist'\r\n// context\r\nimport {ResponsesiveContext} from \"./context\"\r\n\r\n/**\r\n * Private variable\r\n */\r\n/**  storing inline properties\r\n* if the display mode is on mobile, \r\n* all properties inside mobileStyle will be inline in container div of SlideBar component\r\n*/\r\nconst mobileStyle = {\r\n    width: \"100%\",\r\n    minWidth: \"300px\",\r\n    maxWidth: \"900px\",\r\n    height: \"calc(100%)\",\r\n    maxHeight: \"1000px\",\r\n    backgroundColor: \"rgb(37, 37, 37)\",\r\n    padding: \"20px\",\r\n    position: \"absolute\",\r\n}\r\n// -----------------------------------------------------------\r\n// variable for init a context to store value of a state,\r\n// and method to controle which type of content the slide bar dispaly\r\n// use useContext and useReducer \r\n// initial state\r\n// const initialState = {\r\n//     displayType: \"relativechatbox\",\r\n//     positionComponent: {\r\n//         relativechatbox: 2,\r\n//         notification   : 1,\r\n//         onlineFriend   : 1\r\n//     }\r\n// }\r\n// // action\r\n// const actions = {\r\n//     show_relative_chatbox: \"SHOW_RELATIVE_CHAT_BOX\",\r\n//     show_notification_box: \"SHOW_NOTIFICATION_BOX\",\r\n//     show_onlineFriend    : \"SHOW_ONLINE_FRIEND\"\r\n// }\r\n\r\n//------------------------------------------------------------\r\n//  ------------------COMPONENT --------------------------------------------\r\n// Render the specifix content base the button user chosed(notification, friend, groupchat)\r\nconst ContentChange = (props) => {\r\n    return (\r\n        <div className = {\"change-content\"} style = {{overflow: \"hide\"}} >\r\n            <FriendChatList {...props}/>\r\n            <MessageBox  {...props}/>\r\n            <FriendList {...props} />\r\n        </div>\r\n    )\r\n}\r\n// slide bar component \r\nconst SlideBar = (props) => {\r\n    const responsesiveContext = useContext(ResponsesiveContext)\r\n    const [contentInside, setContenInside] = useState(\"chatactived\");\r\n    \r\n    const showMessageBox = (type) => {\r\n        setContenInside(type)\r\n    }\r\n    const showChatBox = (type) => {\r\n        setContenInside(type)\r\n    }\r\n    return (\r\n        // div container decide content in slide bar should be display in mobile or pc\r\n        // using the value of ResponsiveContext.state which be passed in the chatbox component to decide wthich \r\n        <div style = {(responsesiveContext.state.screenType === \"mobile\"? mobileStyle : {})} id = {\"slide-bar\"}>\r\n            <UserInfor typeSelect = {contentInside} showMessageFunc = {showMessageBox} />\r\n            <ContentChange content = {contentInside}>\r\n            </ContentChange>\r\n            <TypeSlide showChatboxfunc = {showChatBox} typeSelect = {contentInside}/>\r\n        </div>\r\n    )\r\n}\r\nexport {SlideBar}","import { useContext, useEffect, useState } from \"react\"\r\nimport { Avartar } from \"./avartar\"\r\nimport { ControleCurrenRoomContext } from \"./context\"\r\nimport domain from \"../../config/domain\"\r\nimport \"./css/chatboxinfor.css\"\r\nimport UserController from \"../../controller/userController\"\r\nimport RoomController from \"../../controller/roomController\"\r\nfunction ChatboxInfor(props) {\r\n    const [userID, setUserID] = useState()\r\n    const [roomName, setRoomName] = useState()\r\n    const currentContext = useContext(ControleCurrenRoomContext)\r\n    const [currenRoomID, setCurrentRoomID] =  useState()\r\n    const [avatarURL, setAvatarURL] = useState()\r\n    useEffect(() => {\r\n        const callAPI = async () => {\r\n            const user = await fetch(domain + \"/info/profi\",\r\n                {\r\n                    method: 'GET',\r\n                    credentials: 'same-origin'\r\n                })\r\n                .then(res => res.json())\r\n                .catch(err => {\r\n                    console.log(err)\r\n                })\r\n            if(!user) return\r\n            setUserID(user.id)\r\n            setAvatarURL(user.url)\r\n        }\r\n        callAPI()\r\n    }, [currentContext])\r\n    useEffect(() => {\r\n        const callAPI = async () => {\r\n            const room = await RoomController.getRoomByID(currentContext.currenOpenRoomID)\r\n            const user = await room.getMembers()\r\n            const users = await fetch(domain + \"/room/room-member/\" + `${currentContext.currenOpenRoomID}`,\r\n                {\r\n                    method: 'GET',\r\n                    credentials: 'same-origin'\r\n                })\r\n                .then(async res => {\r\n                    res = await res.json()\r\n                    return res\r\n                })\r\n                .then(data => data.member)\r\n                .catch(err => {\r\n                    console.log(err)\r\n                })\r\n            if(!users) return\r\n            for (let i = 0; i < users.length; i++) {\r\n                if (users[i].userID !== userID) {\r\n                    setRoomName()\r\n                    if(!users[i].userID) return\r\n                    // const user = await UserController.getUserByID(users[i].userID)\r\n                    const user = await fetch(domain + \"/info/\" + `${users[i].userID}`,\r\n                        {\r\n                            method: 'GET',\r\n                            credentials: 'same-origin'\r\n                        })\r\n                        .then(res => res.json())\r\n                        .catch(err => {\r\n                            console.log(err)\r\n                        })\r\n                    setRoomName(user.userName)\r\n                    setAvatarURL(user.avatar)\r\n                    return\r\n                }\r\n            }\r\n        }\r\n        if(currenRoomID !== currentContext.currenOpenRoomID ) {\r\n            setCurrentRoomID(currentContext.currenOpenRoomID)\r\n            callAPI()\r\n            .catch(Err => {\r\n                console.log(Err)\r\n            })\r\n        }\r\n        \r\n    }, [currentContext])\r\n    return (\r\n        <div className={\"chat-box-infor\"}>\r\n            {props.children}\r\n            <Avartar url={avatarURL} />\r\n            <h3 className={\"tittle\"}>{roomName}</h3>\r\n        </div>\r\n    )\r\n}\r\nexport { ChatboxInfor }","import { useEffect, useRef, useState, useContext } from \"react\";\r\nimport { ControleCurrenRoomContext } from \"./context\";\r\nimport \"./css/chatinput.css\"\r\n// default properties of chatboxinput\r\nconst m_style = {\r\n    resize: \"none\",\r\n}\r\nfunction ChatInput(props) {\r\n    const boxChat = useRef(null)\r\n    const [chatcontent, setChatcontent] = useState(\"\");\r\n    const [roomID, setRoomID] = useState()\r\n    const currentRoom = useContext(ControleCurrenRoomContext)\r\n    function processSubmit() {\r\n        boxChat.current.value = \"\"\r\n        setChatcontent(\"\")\r\n        if(chatcontent !== \"\")\r\n        props.submitbtnfuc(chatcontent);\r\n    }\r\n    function press(e) {\r\n        if(e.charCode === 13 && !e.shiftKey) {\r\n            e.preventDefault();\r\n            if(e.target.value !== \"\")\r\n            props.submitbtnfuc(e.target.value);\r\n            e.target.value = \"\";\r\n            return true;\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(currentRoom.currenOpenRoomID !== roomID) {\r\n            setRoomID(currentRoom.currenOpenRoomID)\r\n             if(props.messageData.length === 0) {\r\n            boxChat.current.focus()\r\n            }\r\n            \r\n        }\r\n       \r\n    }, [currentRoom])\r\n    \r\n    return (\r\n        <div   className = {\"chat-input\"} id = \"chat-content-input\">\r\n            <div>\r\n                <textarea onFocus={() => {\r\n                    props.setInputFocus(true)\r\n                }} onBlur = {() => {\r\n                    props.setInputFocus(false)\r\n                }} ref={boxChat} onKeyPress = {(e) => press(e)} onSubmit = {(e) => {e.preventDefault()}} name = \"chatcontent\" onChange = {(e) => {\r\n                    setChatcontent(e.target.value);\r\n                    e.target.style.height = \"auto\";\r\n                    let temp = e.target.scrollHeight;\r\n                    if(temp > 100) {\r\n                        e.target.style.height = \"100px\"\r\n                        props.on_Resize(\"100% - 70px - 10px - 5px - 100px\")\r\n                    }\r\n                    else {\r\n                        e.target.style.height = `${temp}px`\r\n                        props.on_Resize(`100% - 70px - 10px - 5px - ${temp}px`)\r\n                    }\r\n                }} style = {m_style} ></textarea>\r\n                <button onClick = {processSubmit}>\r\n                    <i className=\"fas fa-share\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport {ChatInput}","/**\r\n * module dependencies\r\n */\r\nimport socketio from \"socket.io-client\"\r\nimport domain from \"../config/domain\"\r\nclass socketIO {\r\n    static socket = socketio(domain)\r\n    /**\r\n     * Connect socketio to server\r\n     * If a connection exist it will disconnect that coonection and reconnect new connection\r\n     */\r\n    static connect() {\r\n        // this.socket.disconnect()\r\n        this.socket.connect(domain)\r\n        this.socket.on(\"connect\", () => {\r\n            console.log(\"success conneting with server\")\r\n        })\r\n        this.socket.on(\"disconnect\", () => {\r\n            console.log(\"disconect with server\")\r\n        })\r\n    }\r\n    /**\r\n     * Create a listener to global socketIO\r\n     * @param {string} event \r\n     * @param {function} callback \r\n     */\r\n    static listen(event, callback) {\r\n        this.socket.removeAllListeners(event)\r\n        this.socket.on(event, callback)\r\n    }\r\n}\r\n\r\nexport default socketIO","import { useState, useEffect, useRef, useContext } from \"react\"\r\nimport { ControleCurrenRoomContext, NewMessageContext } from \"./context\"\r\nimport \"./css/messageroombox.css\"\r\nimport \"./css/textmessage.css\"\r\n\r\nimport { Avartar } from \"./avartar\"\r\nimport RoomController from \"../../controller/roomController\"\r\nimport UserController from \"../../controller/userController\"\r\nimport socketIO from \"../../controller/socketIO\"\r\n\r\nfunction TextMessage(props) {\r\n    let _class_private = \"\";\r\n    const [url, setURL] = useState()\r\n    useEffect(() => {\r\n        const callAPI = async () => {\r\n        if(!props.userID) setURL(null)\r\n        const user = await UserController.getUserByID(props.userID)\r\n        const userURl = await user.getAvatar()\r\n        setURL(userURl)}\r\n        callAPI(props.userID)\r\n    },[props.userID])\r\n    if (props.isYou) {\r\n        _class_private = `message-chat message-right ${props.isYou}`\r\n        return (\r\n            <div style={{ width: \"100%\", overflow: \"hidden\" }} className={_class_private}>\r\n                <div>\r\n                    {props.message}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        _class_private = `message-chat message-left ${props.isYou}`\r\n        return (\r\n            <div className={_class_private}>\r\n                <Avartar url = {url} small {...props} />\r\n                <p>\r\n                    {props.message}\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nfunction MessageRoomBox(props) {\r\n    const [currentRoom, setCurrentRoom] = useState()\r\n    const curretRoomContext = useContext(ControleCurrenRoomContext)\r\n    const texmessagebox = useRef(null);\r\n    const [loginUser, setLoginUser] = useState()\r\n    const [offSetID, setOffSetID] = useState()\r\n    const initMessage = async () => {\r\n        const room = await RoomController.getRoomByID(curretRoomContext.currenOpenRoomID)\r\n                                         .catch(err =>  null)\r\n        if (!room) return\r\n        const message = await room.getMessage(undefined, 100)\r\n        message.forEach(async (element, i) => {\r\n            \r\n            if (message[i].isYou === undefined) {\r\n                const isYou = (element.userID === loginUser.id ? true : false)\r\n                message[i] = {\r\n                    ...element,\r\n                    isYou: isYou,\r\n                }\r\n            }\r\n        });\r\n     \r\n        \r\n        message.reverse()\r\n        if(message[0])\r\n        setOffSetID(message[0].mID)\r\n        props.setMessageData(message)\r\n    }\r\n    \r\n\r\n    useEffect(() => {\r\n        const calllAPI = async () => {\r\n            socketIO.listen('new-message', async message => {\r\n                newMessageContext.setNewMessage(newMessageContext.state + 1)\r\n                const room = await RoomController.getRoomByID(message.cbID)\r\n                message.userID = message.userId\r\n                await room.addMessage(message, true)\r\n                props.setMessageData([...props.data_in, message])\r\n                texmessagebox.current.scrollTop = texmessagebox.current.scrollHeight;\r\n            })\r\n        }\r\n       calllAPI()\r\n    }, [props.data_in])\r\n   \r\n    const newMessageContext = useContext(NewMessageContext)\r\n    useEffect(() => {\r\n        const callAPI = async () => {\r\n            const loginuser = await UserController.getLoginUser()\r\n            setLoginUser(loginuser)\r\n        }\r\n       \r\n        callAPI()\r\n    }, [props])\r\n    useEffect(() => {\r\n        if (props.inputFocus) texmessagebox.current.scrollTop = texmessagebox.current.scrollHeight;\r\n        if (curretRoomContext.currenOpenRoomID !== currentRoom) {\r\n            setCurrentRoom(curretRoomContext.currenOpenRoomID)\r\n            props.setMessageData([])\r\n            initMessage()\r\n        }\r\n    }, [props])\r\n    const data = props.data_in\r\n    if (!currentRoom) {\r\n        return (\r\n            <div ref={texmessagebox} className={\"message-room-box\"} style={{ height: `calc(${props.height})` }}>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div onScroll={ async (e) => {\r\n            setTimeout(async () => {\r\n                if(texmessagebox.current.scrollTop < 500) {\r\n                    const room = await RoomController.getRoomByID(currentRoom)\r\n                    const message = await room.getMessage(offSetID, 100)\r\n                                            .catch(err => {\r\n                                                return null\r\n                                            })\r\n                    if(!message || !message[message.length - 1] || !message[message.length - 1].mID) return\r\n                    let offsetid = message[message.length - 1].mID\r\n                    if(offsetid < offSetID) {\r\n                        setOffSetID(offsetid)\r\n                        message.reverse()\r\n                        props.setMessageData([...message, ...data])\r\n                    }\r\n                \r\n                    \r\n                }\r\n            }, 500);\r\n            \r\n            \r\n        }} ref={texmessagebox} className={\"message-room-box\"} style={{ height: `calc(${props.height})` }}>\r\n            { \r\n                data.map(Element => {\r\n                    return <TextMessage {...Element} />\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport { MessageRoomBox }","/**\r\n * module dependencies\r\n */\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport { ResponsesiveContext, ControleCurrenRoomContext, NewMessageContext } from \"./context\"\r\nimport { ChatboxInfor } from \"./chatboxinfor\"\r\nimport { ChatInput } from \"./chatinput\"\r\nimport { MessageRoomBox } from \"./messageroombox\"\r\nimport domain from \"../../config/domain\"\r\n// css\r\nimport \"./css/chatcontent.css\"\r\nimport RoomController from \"../../controller/roomController\"\r\nimport UserController from \"../../controller/userController\"\r\n\r\n/**\r\n * generate a CHATBOX\r\n * @param {object} props \r\n * @returns \r\n */\r\nfunction ChatContent(props) {\r\n    const [showChatContent, setShowChatContent] = useState(false) \r\n    /**\r\n     * classComponent for store classname of container box in this container\r\n     * changing value mean changing display type\r\n     * value:\r\n     * \r\n     * \"chat-content\"  : display chat box in pc mode\r\n     * \r\n     * \"chat-content- mobile\" : display chatbox in mobile mode (default is hidding below the slidebar)\r\n     * \r\n     * \"chat-content-mobile chat-content-mobile-active-animation\" : for active animation when chat box show up\r\n     * \r\n     * \"chat-content-mobile chat-content-mobile-showed\"           : for show the content in mobile form\r\n     * \r\n     * \"chat-content-mobile chat-content-mobile-showed chat-content-mobile-out-animation\" : for runing hidding animation chat box in screenType mobile\r\n     * \r\n     */\r\n    const [classComponent, setClassComponent] = useState(\"chat-content\")\r\n    const responsiveContext = useContext(ResponsesiveContext)\r\n    const currentRoom = useContext(ControleCurrenRoomContext)\r\n    const [messageRoomBoxHeight, setMessageRoomBoxHeight] = useState(\"100% - 70px - 10px - 5px - 41px\")\r\n    const [userID, setUserID] = useState();\r\n    // update display type by changing classComponent state when screen type change\r\n    const updateDisplayStyle = () => {\r\n        // pc type\r\n        if (responsiveContext.state.screenType === \"pc\") {\r\n            setShowChatContent(false)\r\n            setClassComponent(\"chat-content\")\r\n            return\r\n        }\r\n        // mobile type and the chatcontent will hide\r\n        else if (responsiveContext.state.screenType === \"mobile\" &&\r\n            responsiveContext.state.mobileProperties.slideBar === true) {\r\n                setShowChatContent(false)\r\n                setClassComponent(\"chat-content-mobile\")\r\n            return\r\n        }\r\n        // mobile type and the chatcontent will show\r\n        else if (responsiveContext.state.screenType === \"mobile\" &&\r\n            responsiveContext.state.mobileProperties.content === true && showChatContent === false) {\r\n            setClassComponent(\"chat-content-mobile chat-content-mobile-active-animation\")\r\n            setTimeout(() => {\r\n                setShowChatContent(true)\r\n                setClassComponent(\"chat-content-mobile chat-content-mobile-showed\");\r\n            }\r\n                , 500)\r\n            return\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        updateDisplayStyle()\r\n    }, [responsiveContext, showChatContent])\r\n    useEffect(() => {\r\n        const callAPI = async () => {\r\n            const userID = await UserController.getLoginUser()\r\n            setUserID(userID)\r\n        }\r\n        callAPI()\r\n    }, [])\r\n    const BackBtn = () => {\r\n        return (\r\n            <i onClick={\r\n                () => {\r\n                    if (responsiveContext.state.screenType === \"mobile\") {\r\n                        setShowChatContent(false)\r\n                        setClassComponent(\"chat-content-mobile chat-content-mobile-showed chat-content-mobile-out-animation\")\r\n                        responsiveContext.setMobileModeOnSlideBar()\r\n                    }\r\n                }\r\n            } className=\"fas fa-angle-right\" style={{cursor: \"pointer\"}}></i>\r\n        )\r\n    }\r\n    const controlmessageRoomBoxHeight = (height) => {\r\n        setMessageRoomBoxHeight(height)\r\n    }\r\n    const [messageData, setMessageData] = useState([]);\r\n    const newMessageContext = useContext(NewMessageContext)\r\n    const testsubmitbtn = async (value) => {\r\n        let temps = {\r\n            value: false\r\n        }\r\n        // const user = await UserController.getUserByID(userID.id)\r\n        const user = await UserController.getLoginUser()\r\n        const userName = user.userName\r\n        let d = new Date,\r\n        dformat = [d.getMonth()+1,\r\n               d.getDate(),\r\n               d.getFullYear()].join('/')+' '+\r\n              [d.getHours(),\r\n               d.getMinutes(),\r\n               d.getSeconds()].join(':');\r\n        let temp = {\r\n            url: \"\",\r\n            userID: userID,\r\n            message: value,\r\n            isYou: true,\r\n            sucess: temps,\r\n            userName: userName,\r\n            datetime: dformat\r\n        };\r\n        const cbID = currentRoom.currenOpenRoomID\r\n        const body = {\r\n            \"cbID\": cbID,\r\n            \"message\": value\r\n        }\r\n        fetch(domain + \"/sendmessage\", {\r\n            method: \"POST\",\r\n            credentials: \"same-origin\",\r\n            headers : {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(body)\r\n        })\r\n        .then(data => {\r\n            if(data.status === 200) {\r\n                temps.value = true\r\n                setUserID(userID)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n        const room = await RoomController.getRoomByID(cbID)\r\n        if(!room || !room.addMessage) return\r\n        newMessageContext.setNewMessage(newMessageContext.state + 1)\r\n        setMessageData([...messageData, temp]);\r\n    }\r\n    const [inputFocus, setInputFocus] = useState(false) \r\n    const [cbID, setcbID] = useState()\r\n    useEffect(() => {\r\n        if(currentRoom.currenOpenRoomID !== cbID) {\r\n            setInputFocus(true)\r\n        }\r\n    }, [currentRoom])\r\n    return (\r\n        <div style={{ overflow: \"hidden\" }} className={classComponent} id=\"chat-content\">\r\n            <ChatboxInfor userID = {userID} trgger = {currentRoom}>\r\n                {responsiveContext.state && responsiveContext.state.screenType === \"mobile\" ? <BackBtn /> : \"\"}\r\n            </ChatboxInfor>\r\n            <MessageRoomBox userID = {userID} inputFocus = {inputFocus} height={messageRoomBoxHeight} setMessageData = {setMessageData} data_in={messageData} />\r\n            <ChatInput messageData = {messageData} setInputFocus = {setInputFocus} on_Resize={controlmessageRoomBoxHeight} submitbtnfuc={testsubmitbtn} />\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport { ChatContent }","import { useContext } from \"react\"\r\nimport { DialogContext } from \"./context\"\r\nimport \"./css/dialog.css\"\r\nfunction Dialog(props) {\r\n    const dialogContext = useContext(DialogContext)\r\n    const className = props.active ? \"dialog dialog-active\" : \"dialog dialog-hide\"\r\n    return (\r\n        <>\r\n            <div className={className}>\r\n                <div className=\"exist-btn\" onClick={() => {\r\n                    dialogContext.hide()\r\n                }}>x</div>\r\n                {props.children}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Dialog","import { useState } from \"react\"\r\nimport Avatareditor from \"react-avatar-editor\"\r\nimport domain from \"../../config/domain\"\r\nimport \"./css/avatareditor.css\"\r\nfunction AvatarEditor() {\r\n  const [scale, setScale] = useState(1)\r\n  const [urlDefault, setURLDefault] = useState()\r\n  // const [editor, setEditor] = useState()\r\n  const [urlCrop, setURLCrop] = useState()\r\n  const [status, setStatus] = useState(\"Change Avatar\")\r\n  const [preventAction, setPreventAction] = useState(false)\r\n  function scaleChange(e) {\r\n    const v = e.target.value\r\n    setScale(1 + v/100)\r\n  }\r\n  const handleFileChange = (e) => {\r\n    let url\r\n    try {\r\n    if(!e || !e.target || !e.target.files) return\r\n    url = URL.createObjectURL(e.target.files[0]);}\r\n    catch(err) {\r\n\r\n    }\r\n    setURLDefault(url)\r\n    console.log(url);\r\n  };\r\n  const setEditorRef = async (ed) => {\r\n    // setEditor(ed)\r\n    if(!ed || !ed.getImageScaledToCanvas) return\r\n    const blob = await new Promise(resolve => ed.getImageScaledToCanvas().toBlob(resolve));\r\n    setURLCrop(blob)\r\n  };\r\n  const changeAvatar = async () => {\r\n    const formData = new FormData()\r\n    formData.append(\"avatar\", urlCrop)\r\n    if(!urlDefault) return\r\n    setPreventAction(true)\r\n    setStatus(\"waiting\")\r\n    fetch(domain + \"/upload/avatar\", {\r\n      method: \"POST\",\r\n      credentials: \"same-origin\",\r\n      body: formData\r\n    })\r\n    .then(() => {\r\n      setPreventAction(false)\r\n      setStatus(\"Changing success, refresh page to update new result\")\r\n      setTimeout(() => {\r\n        setStatus(\"Change Avatar\")\r\n      }, 5000)\r\n    })\r\n    .catch(err => {\r\n      setPreventAction(false)\r\n      setStatus(\"Err, refresh page and upload again\")\r\n      setTimeout(() => {\r\n        setStatus(\"Change Avatar\")\r\n      }, 5000)\r\n      console.log(err)\r\n    })\r\n  }\r\n  const classBTN = (!preventAction ? \"Change-Avatar-Btn\" : \"Change-Avatar-Btn noClick\")\r\n  return (\r\n    <>\r\n      <Avatareditor\r\n        ref = {setEditorRef}\r\n        image= {urlDefault}\r\n        width={250}\r\n        height={250}\r\n        border={10}\r\n        borderRadius={\"125\"}\r\n        color={[119, 124, 128, 0.6]} // RGBA\r\n        scale={scale}\r\n        rotate={0}\r\n      />\r\n      <div id=\"avatar-control\">\r\n          <div className=\"add-file\">\r\n          <form>\r\n          <input accept=\"image/png, image/gif, image/jpeg\" onChange={handleFileChange} type=\"file\" name=\"img\" id=\"img\" style={{\"display\": \"none\"}}/>\r\n          <label className=\"add-btn\" for=\"img\">Add Img</label>\r\n          </form>\r\n          </div>\r\n          <div className=\"Zoom\">\r\n            <div>Zoom: </div>\r\n            <input onChange={scaleChange} type=\"range\" id=\"volume\" name=\"volume\" min=\"0\" max=\"100\"></input>\r\n          </div>\r\n          <div onClick={changeAvatar} className={classBTN}>{status}</div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\nexport default AvatarEditor","/**\r\n * module dependecies\r\n */\r\nimport { useEffect, useReducer, useState } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport { SlideBar } from \"./slidebar\";\r\nimport { ChatContent } from \"./chatcontent\"\r\nimport domain from \"../../config/domain\";\r\nimport { ResponsesiveContext, NotificationContext, ChatContext, DialogContext, ControleCurrenRoomContext, NewMessageContext } from \"./context\"\r\nimport socketIO from \"../../controller/socketIO\";\r\nimport Dialog from \"./dialog\"\r\nimport \"./css/chatbox.css\"\r\nimport { User } from \"../../controller/userController\";\r\nimport AvatarEditor from \"./AvatarEditor\"\r\n/**\r\n * Private variable\r\n */\r\n// initial state responsive context\r\n// ------------------------------------------------------------------\r\nconst initialState = {\r\n\tscreenType: undefined,\r\n\tmobileProperties: {\r\n\t\tslidebar: undefined,\r\n\t\tcontent: undefined\r\n\t}\r\n}\r\n// acction to handle ResponsiveContext module\r\nconst actions = {\r\n\tturn_pc_mode: \"TURN-PC-MODE\",\r\n\tturn_mobile_slide_bar: \"TURN-MOBILE-SLIDE-BAR\",\r\n\tturn_mobile_chatbox: \"TURN-MOBILE-CHATBOX\",\r\n\tclear: \"CLEAR-DATA\"\r\n}\r\n// reducer to handle ResponsiveContext module\r\nconst reducer = (state, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase actions.turn_pc_mode:\r\n\t\t\treturn {\r\n\t\t\t\tscreenType: \"pc\",\r\n\t\t\t\tmobileProperties: {\r\n\t\t\t\t\tslidebar: undefined,\r\n\t\t\t\t\tcontent: undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\tcase actions.turn_mobile_slide_bar:\r\n\t\t\treturn {\r\n\t\t\t\tscreenType: \"mobile\",\r\n\t\t\t\tmobileProperties: {\r\n\t\t\t\t\tslidebar: true,\r\n\t\t\t\t\tcontent: false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\tcase actions.turn_mobile_chatbox: {\r\n\t\t\treturn {\r\n\t\t\t\tscreenType: \"mobile\",\r\n\t\t\t\tmobileProperties: {\r\n\t\t\t\t\tslidebar: false,\r\n\t\t\t\t\tcontent: true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase actions.clear: {\r\n\t\t\treturn {\r\n\t\t\t\t...initialState\r\n\t\t\t}\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Not support ${action.type}`)\r\n\t}\r\n}\r\n//--------------------------------------------------------------------------------\r\n// initial notificationcontext\r\nconst initialNotificaionContext = {\r\n\tisOpenNotificationBox: false,\r\n\tunreadNotifications: [],\r\n\tNotifications: []\r\n}\r\n// action\r\nconst NotificationActions = {\r\n\tsetNotificationBoxStatus: \"SET_NOTIFICATION_BOX_STATUS\",\r\n\taddUnreadNotification: \"ADD_UNREAD_NOTIFICATION\",\r\n\tclearAllNewNotification: \"READ_UNREAD_NOTIFICATION\",\r\n\tinitUnreadNotification: \"UNREAD_NOTIFICATION_INIT\",\r\n\tinitNotification: \"INIT_NOTIFICATION\",\r\n\taddNotification: \"ADD_NOTIFICATION\",\r\n\tclear: \"CLEAR\"\r\n}\r\n// reducer Notification\r\nconst reducerNotification = (state, actions) => {\r\n\tswitch (actions.type) {\r\n\t\tcase NotificationActions.initNotification: {\r\n\t\t\treturn {\r\n\t\t\t\tisOpenNotificationBox: state.isOpenNotificationBox,\r\n\t\t\t\tunreadNotifications: [...state.unreadNotifications],\r\n\t\t\t\tNotifications: [...actions.initNoti]\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase NotificationActions.addNotification: {\r\n\t\t\treturn {\r\n\t\t\t\tisOpenNotificationBox: state.isOpenNotificationBox,\r\n\t\t\t\tunreadNotifications: [...state.unreadNotifications],\r\n\t\t\t\tNotifications: [actions.noti, ...state.Notifications]\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase NotificationActions.initUnreadNotification: {\r\n\t\t\treturn {\r\n\t\t\t\tisOpenNotificationBox: state.isOpenNotificationBox,\r\n\t\t\t\tunreadNotifications: [...actions.unreadNoti],\r\n\t\t\t\tNotifications: [...state.Notifications]\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase NotificationActions.setNotificationBoxStatus: {\r\n\t\t\treturn {\r\n\t\t\t\tisOpenNotificationBox: actions.status,\r\n\t\t\t\tunreadNotifications: [...state.unreadNotifications],\r\n\t\t\t\tNotifications: [...state.Notifications]\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase NotificationActions.addUnreadNotification: {\r\n\t\t\treturn {\r\n\t\t\t\tisOpenNotificationBox: state.isOpenNotificationBox,\r\n\t\t\t\tunreadNotifications: [{ id: actions.notificationID }, ...state.unreadNotifications],\r\n\t\t\t\tNotifications: [...state.Notifications]\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase NotificationActions.clearAllNewNotification: {\r\n\t\t\treturn {\r\n\t\t\t\tisOpenNotificationBox: state.isOpenNotificationBox,\r\n\t\t\t\tunreadNotifications: [],\r\n\t\t\t\tNotifications: [...state.Notifications]\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase NotificationActions.clear: {\r\n\t\t\treturn {\r\n\t\t\t\t...initialNotificaionContext\r\n\t\t\t}\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Not support ${actions.type}`)\r\n\t}\r\n}\r\n//--------------------------------------------------------------------------------\r\n// -----------------------chat context --------------------------------------\r\nconst initChatContext = {\r\n\troomsMessage: [],\r\n\troomsInfo: [],\r\n}\r\nconst chatContextActions = {\r\n\tUpdateMessage: \"UPDATE_ROOM_MESSAGE\",\r\n\tInitRoomInfo: \"INIT_ROOM_INFO\",\r\n\tAddMessage: \"ADD_MESSAGE\",\r\n\tclear: \"CLEAR\"\r\n}\r\n// reducer\r\n/*\r\n\t\r\n\r\n*/\r\nconst reducerContext = (state, actions) => {\r\n\tswitch (actions.type) {\r\n\t\tcase chatContextActions.AddMessage:\r\n\t\t\treturn {\r\n\t\t\t\troomsMessage: [...actions.messages],\r\n\t\t\t\troomsInfo: [...state.roomsInfo]\r\n\t\t\t}\r\n\t\tcase chatContextActions.UpdateMessage:\r\n\t\t\treturn {\r\n\t\t\t\troomsMessage: [...state.roomsMessage],\r\n\t\t\t\troomsInfo: [...actions.room]\r\n\t\t\t}\r\n\t\tcase chatContextActions.clear:\r\n\t\t\treturn {\r\n\t\t\t\t...initChatContext\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Not support ${actions.type}`)\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Fuction for generate all component in url \"/\" include side bar in the left and chat box in the right\r\n * @returns ChatApp component\r\n */\r\nfunction ChatApp() {\r\n\t// init state for deciding display app in mobile or in pc mode\r\n\tconst [ResponsesiveState, dispathResponsiveMethod] = useReducer(reducer, initialState)\r\n\t// value for ResponsiveContext\r\n\tconst valueResponsiveContext = {\r\n\t\tstate: ResponsesiveState,\r\n\t\tsetPCMode: () => { dispathResponsiveMethod({ type: actions.turn_pc_mode }) },\r\n\t\tsetMobileModeOnSlideBar: () => {\r\n\t\t\tdispathResponsiveMethod({ type: actions.turn_mobile_slide_bar })\r\n\t\t},\r\n\t\tsetMobileModeOnChatbox: () => {\r\n\t\t\tdispathResponsiveMethod({ type: actions.turn_mobile_chatbox })\r\n\t\t},\r\n\t\tclear: () => {\r\n\t\t\tdispathResponsiveMethod({type: actions.clear})\r\n\t\t}\r\n\t}\r\n\t// init state for notificationbox\r\n\tconst [NotificationState, dispathNotificationContext] = useReducer(reducerNotification, initialNotificaionContext)\r\n\t// set method and value for child elements\r\n\tconst valueNotificationContext = {\r\n\t\tstate: NotificationState,\r\n\t\tinitUnreadNotification: (unreadNotifications) => {\r\n\t\t\tdispathNotificationContext({ type: NotificationActions.initUnreadNotification, unreadNoti: unreadNotifications })\r\n\t\t},\r\n\t\tsetNotificationBoxStatus: (status) => {\r\n\t\t\tdispathNotificationContext({ type: NotificationActions.setNotificationBoxStatus, status: status })\r\n\t\t},\r\n\t\taddUnreadNotification: (notificationID) => {\r\n\t\t\tdispathNotificationContext({ type: NotificationActions.addUnreadNotification, notificationID: notificationID })\r\n\t\t},\r\n\t\tinitNotification: (notifications) => {\r\n\t\t\tdispathNotificationContext({ type: NotificationActions.initNotification, initNoti: notifications })\r\n\t\t},\r\n\t\taddNotification: (noti) => {\r\n\t\t\tdispathNotificationContext({ type: NotificationActions.addNotification, noti: noti })\r\n\t\t},\r\n\t\tclearUnreadNotification: () => {\r\n\t\t\tconst unreadNoti = valueNotificationContext.state.unreadNotifications\r\n\r\n\t\t\tunreadNoti.forEach(element => {\r\n\t\t\t\tfetch(domain + \"/notification/read/\" + `${element.ntfID}`,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\tcredentials: 'same-origin',\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tdispathNotificationContext({ type: NotificationActions.clearAllNewNotification })\r\n\t\t},\r\n\t\tclear: () => {\r\n\t\t\tdispathNotificationContext({type: NotificationActions.clear})\r\n\t\t}\r\n\t}\r\n\tconst [ChatContextState, dispathChatContext] = useReducer(reducerContext, initChatContext)\r\n\tconst valueChatContext = {\r\n\t\tstate: ChatContextState,\r\n\t\t/**\r\n\t\t * Add new Message to the context reducer\r\n\t\t * @param {*} chatboxID \r\n\t\t * @param {*} messages \r\n\t\t * @returns \r\n\t\t */\r\n\t\taddMessage: (chatboxID, messages) => {\r\n\t\t\tlet roomsmessage = valueChatContext.state.roomsMessage;\r\n\t\t\tif (!roomsmessage) roomsmessage = []\r\n\t\t\t// add message\r\n\t\t\tfor (let i = 0; i < roomsmessage.length; i++) {\r\n\t\t\t\tif (roomsmessage[i].cbID === chatboxID) {\r\n\t\t\t\t\troomsmessage[i].messages.push(messages)\r\n\t\t\t\t\tdispathChatContext({ type: chatContextActions.AddMessage, messages: roomsmessage })\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// create new element for store message\r\n\t\t\troomsmessage.push({\r\n\t\t\t\tcbID: chatboxID,\r\n\t\t\t\tmessages: [messages]\r\n\t\t\t})\r\n\t\t\tdispathChatContext({ type: chatContextActions.AddMessage, messages: roomsmessage })\r\n\t\t\treturn\r\n\t\t},\r\n\t\t/**\r\n\t\t * Add a list of message to ChatContextState\r\n\t\t * second parameter must be string\r\n\t\t * @param {*} chatboxID \r\n\t\t * @param {*} messageList \r\n\t\t * @returns \r\n\t\t */\r\n\t\taddListMessage: (chatboxID, messageList) => {\r\n\t\t\tif (typeof (messageList) !== typeof ([])) throw new Error(\"Second parameter must be array\")\r\n\t\t\tlet roomsmessage = valueChatContext.state.roomsMessage;\r\n\t\t\tif (!roomsmessage) roomsmessage = []\r\n\t\t\tfor (let i = 0; i < roomsmessage.length; i++) {\r\n\t\t\t\tif (roomsmessage[i].cbID === chatboxID) {\r\n\t\t\t\t\troomsmessage[i].message = roomsmessage[i].message.concat(messageList)\r\n\t\t\t\t\tdispathChatContext({ type: chatContextActions.AddMessage, messages: roomsmessage })\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\troomsmessage.push({\r\n\t\t\t\tcbID: chatboxID,\r\n\t\t\t\tmessages: [...messageList]\r\n\t\t\t})\r\n\t\t\tdispathChatContext({ type: chatContextActions.AddMessage, messages: roomsmessage })\r\n\t\t\treturn\r\n\t\t},\r\n\t\tupdateRoomInfo: (roominfo) => {\r\n\t\t\tif (!roominfo) return\r\n\t\t\tconst makeDate = str => {\r\n\r\n\t\t\t\tconst [_, yyyy, mm, dd, hh, min, ss] = str.match(/(\\d{4})-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/);\r\n\t\t\t\tconst date = new Date(yyyy, mm - 1, dd, hh, min, ss)\r\n\t\t\t\treturn date\r\n\t\t\t};\r\n\r\n\t\t\tlet roomsInfo = valueChatContext.state.roomsInfo;\r\n\t\t\tif (!roomsInfo) roomsInfo = []\r\n\t\t\tfor (let i = 0; i < roomsInfo.length; i++) {\r\n\t\t\t\tif (roomsInfo[i].cbID === roominfo.cbID) {\r\n\t\t\t\t\troomsInfo[i] = {\r\n\t\t\t\t\t\tcbID: roominfo.cbID,\r\n\t\t\t\t\t\tdatemodifi: roominfo.datemodifi\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (roomsInfo.length >= 2) {\r\n\t\t\t\t\t\troomsInfo.sort((a, b) => {\r\n\t\t\t\t\t\t\t// const d1 = makeDate(a.datemodifi)\r\n\t\t\t\t\t\t\t// const d2 = makeDate(b.datemodifi)\r\n\t\t\t\t\t\t\treturn makeDate(b.datemodifi) - makeDate(a.datemodifi)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdispathChatContext({ type: chatContextActions.UpdateMessage, room: roomsInfo })\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\troomsInfo.push({\r\n\t\t\t\tcbID: roominfo.cbID,\r\n\t\t\t\tdatemodifi: roominfo.datemodifi\r\n\t\t\t})\r\n\t\t\tif (roomsInfo.length >= 2) {\r\n\t\t\t\troomsInfo.sort((a, b) => {\r\n\t\t\t\t\t// const d1 = makeDate(a.datemodifi)\r\n\t\t\t\t\t// const d2 = makeDate(b.datemodifi)\r\n\t\t\t\t\treturn makeDate(b.datemodifi) - makeDate(a.datemodifi)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tdispathChatContext({ type: chatContextActions.UpdateMessage, room: roomsInfo })\r\n\t\t\treturn\r\n\t\t},\r\n\t\tclear: () => {\r\n\t\t\tdispathChatContext({ type: chatContextActions.clear})\r\n\t\t}\r\n\t}\r\n\t// dialog\r\n\tconst [DialogStatus, setDialogStatus] = useState(false)\r\n\tconst valueDialogContext = {\r\n\t\tvalue: DialogStatus,\r\n\t\tshow: () => {\r\n\t\t\tsetDialogStatus(true)\r\n\t\t},\r\n\t\thide: () => {\r\n\t\t\tsetDialogStatus(false)\r\n\t\t}\r\n\t}\r\n\tconst [currenOpenRoomID, setCurrenOpenRoomID] = useState(null)\r\n\tconst valueControlCurrenOpenRoom = {\r\n\t\tcurrenOpenRoomID: currenOpenRoomID,\r\n\t\tsetCurrenOpenRoomID: (roomID) => {\r\n\t\t\tsetCurrenOpenRoomID(roomID)\r\n\t\t}\r\n\t}\r\n\t// variable\r\n\tconst history = useHistory()\r\n\t// update the type of the screen\r\n\tconst checkType = () => {\r\n\t\tif ((document.documentElement.clientWidth >= 610)) {\r\n\t\t\tvalueResponsiveContext.setPCMode()\r\n\t\t}\r\n\t\telse if ((document.documentElement.clientWidth < 610)) {\r\n\t\t\tvalueResponsiveContext.setMobileModeOnSlideBar()\r\n\t\t};\r\n\t}\r\n\t// checking if connection was auth\r\n\tfetch(domain + \"/isauth/\",\r\n\t\t{\r\n\t\t\tmethod: 'GET',\r\n\t\t\tcredentials: 'same-origin',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t})\r\n\t\t.then(async response => {\r\n\t\t\tif (response.status === 200) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thistory.push(\"/login\")\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\thistory.push(\"/login\")\r\n\t\t})\r\n\tuseEffect(() => {\r\n\t\tconst callAPI = async () => {\r\n\t\t\tcheckType();\r\n\t\twindow.addEventListener('resize', checkType)\r\n\t\tsocketIO.connect()\r\n\t\tsocketIO.listen('new-notification', async notification => {\r\n\t\t\tconst userID = notification.userSend || notification.userIDSend\r\n\t\t\tconst user = new User(userID)\r\n\t\t\tconst userName = await user.getUserName()\r\n\t\t\tnotification.userName = userName\r\n\t\t\tvalueNotificationContext.addNotification(notification)\r\n\t\t\tif (NotificationState.isOpenNotificationBox) return\r\n\t\t\tvalueNotificationContext.addUnreadNotification(notification)\r\n\t\t})\r\n\t\tsocketIO.listen('new-update-room', async room => {\r\n\t\t\tconst id = room.cbID\r\n\t\t\tawait fetch(domain + \"/room/get-room/\" + `${id}`,\r\n\t\t\t\t{\r\n\t\t\t\t\tmethod: 'GET',\r\n\t\t\t\t\tcredentials: 'same-origin',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.then(async res => {\r\n\t\t\t\t\tif (res.status !== 200) return\r\n\t\t\t\t\tres = await res.json()\r\n\t\t\t\t\tvalueChatContext.updateRoomInfo(res.room)\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {\r\n\t\t\t\t\tconsole.log(err)\r\n\t\t\t\t})\r\n\t\t})\r\n\t\t// socketIO.listen('new-message', async message => {\r\n\t\t// \tconsole.log(\"1\")\r\n\t\t// \tconst room = await RoomController.getRoomByID(message.cbID)\r\n\t\t// \tawait room.addMessage(message, true)\r\n\t\t// \tvalueChatContext.addMessage(message.cbID, message)\r\n\t\t// \tawait fetch(domain + \"/room/get-room/\" + `${message.cbID}`,\r\n\t\t// \t\t{\r\n\t\t// \t\t\tmethod: 'GET',\r\n\t\t// \t\t\tcredentials: 'same-origin',\r\n\t\t// \t\t\theaders: {\r\n\t\t// \t\t\t\t'Content-Type': 'application/json'\r\n\t\t// \t\t\t}\r\n\t\t// \t\t})\r\n\t\t// \t\t.then(async res => {\r\n\t\t// \t\t\tif (res.status !== 200) return\r\n\t\t// \t\t\tres = await res.json()\r\n\t\t// \t\t\tvalueChatContext.updateRoomInfo(res.room)\r\n\t\t// \t\t})\r\n\t\t// \t\t.catch(err => {\r\n\t\t// \t\t\tconsole.log(err)\r\n\t\t// \t\t})\r\n\t\t// })\r\n\t\t// get unread notification\r\n\t\tawait fetch(domain + \"/notification/unread\",\r\n\t\t\t{\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\tcredentials: 'same-origin',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then(async response => {\r\n\t\t\t\treturn await response.json()\r\n\t\t\t})\r\n\t\t\t.then(data => {\r\n\t\t\t\tconst unreadNoti = data['unreadNoti']\r\n\t\t\t\tvalueNotificationContext.initUnreadNotification(unreadNoti)\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t})\r\n\t\t// get notification for init\r\n\t\tfetch(domain + \"/notification\",\r\n\t\t\t{\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\tcredentials: 'same-origin',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then(async response => {\r\n\t\t\t\treturn await response.json()\r\n\t\t\t})\r\n\t\t\t.then(data => {\r\n\t\t\t\tvalueNotificationContext.initNotification(data)\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t})\r\n\t\t// update room \r\n\t\tfetch(domain + \"/room/get-room/?limit=100\", {\r\n\t\t\tmethod: 'GET',\r\n\t\t\tcredentials: 'same-origin',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t})\r\n\t\t\t.then(async res => {\r\n\t\t\t\tif (res.status !== 200) return\r\n\t\t\t\tres = await res.json()\r\n\t\t\t\tconst rooms = res.rooms\r\n\t\t\t\tfor (let i = 0; i < rooms.length; i++) {\r\n\t\t\t\t\tvalueChatContext.updateRoomInfo(rooms[i])\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t})\r\n\t\t}\r\n\t\tcallAPI()\r\n\t}, [])\r\n\tconst [newMessage, setNewMessage] = useState(1)\r\n\tconst valueContextNewMessage = { state: newMessage, setNewMessage: setNewMessage }\r\n\treturn (\r\n\t\t<NewMessageContext.Provider value={valueContextNewMessage} >\r\n\t\t\t<ControleCurrenRoomContext.Provider value={valueControlCurrenOpenRoom}>\r\n\t\t\t\t<DialogContext.Provider value={valueDialogContext}>\r\n\t\t\t\t\t<ChatContext.Provider value={valueChatContext}>\r\n\t\t\t\t\t\t<ResponsesiveContext.Provider value={valueResponsiveContext}>\r\n\t\t\t\t\t\t\t<Dialog active={(() => valueDialogContext.value)()}>\r\n\t\t\t\t\t\t\t\t<AvatarEditor/>\r\n\t\t\t\t\t\t\t</Dialog>\r\n\t\t\t\t\t\t\t<div className={(() => {\r\n\t\t\t\t\t\t\t\tif (!valueDialogContext.value) return \"\"\r\n\t\t\t\t\t\t\t\treturn \"blur-chat-box\"\r\n\t\t\t\t\t\t\t})()} id=\"chatapp\" style={{ overflow: \"hidden\", display: \"flex\", width: \"100vw\", position: \"relative\" }} >\r\n\t\t\t\t\t\t\t\t<NotificationContext.Provider value={valueNotificationContext}>\r\n\t\t\t\t\t\t\t\t\t<SlideBar />\r\n\t\t\t\t\t\t\t\t</NotificationContext.Provider>\r\n\t\t\t\t\t\t\t\t<ChatContent />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</ResponsesiveContext.Provider>\r\n\t\t\t\t\t</ChatContext.Provider>\r\n\t\t\t\t</DialogContext.Provider>\r\n\t\t\t</ControleCurrenRoomContext.Provider>\r\n\t\t</NewMessageContext.Provider>\r\n\t)\r\n}\r\nexport { ChatApp }","/**\r\n * module dependencies\r\n */\r\nimport {useRef, useContext, createContext, useReducer} from 'react'\r\nimport \"./css/loginform.css\"\r\nimport domain from \"../../config/domain\"\r\nimport { useHistory } from 'react-router-dom'\r\n/**\r\n * Private variable \r\n */\r\n// create context for shareing message in child node\r\nconst MessageContext = createContext()\r\n// initial state\r\nconst initialState = {\r\n    type : undefined,\r\n    message : undefined\r\n}\r\n// acction\r\nconst actions = {\r\n    update_login_message: \"UPDATE_LOGIN_MESSAGE\",\r\n    update_register_message: \"UPDATE_REGISTER_MESSAGE\"\r\n}\r\n// Reducer to handdle acction\r\nconst reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case actions.update_login_message:\r\n            return {\r\n                type: \"UPDATE_LOGIN_MESSAGE\",\r\n                message: action.message\r\n            }\r\n        case actions.update_register_message:\r\n            return {\r\n                type : \"UPDATE_REGISTER_MESSAGE\",\r\n                message: action.message\r\n            }\r\n        default:\r\n            throw new Error(`Not support ${state.type}`)\r\n    }\r\n}\r\n/**\r\n * Login component\r\n * \r\n */\r\nfunction Login() {\r\n    const Message = useContext(MessageContext)\r\n    const usernameInputElement = useRef(null)\r\n    const passwordInputElement = useRef(null)\r\n    const history = useHistory()\r\n    const Login = async () => {\r\n        const username = usernameInputElement.current.value\r\n        const password = passwordInputElement.current.value\r\n        passwordInputElement.current.value = \"\"\r\n        if(!username) {\r\n            Message.updateLoginMessage(\"Username must be fill\")\r\n            return\r\n        }\r\n        else if(username.length < 4) {\r\n            Message.updateLoginMessage(\"Username must containt at leat 4 charecter\")\r\n            return\r\n        }\r\n        if(!password) {\r\n            Message.updateLoginMessage(\"Password must be fill\")\r\n            return\r\n        }\r\n        else if(password.length < 6) {\r\n            Message.updateLoginMessage(\"Password must containt at least 6 charecter\")\r\n            return\r\n        }\r\n        const data     = new URLSearchParams()\r\n        data.append(\"userName\", username)\r\n        data.append(\"password\", password)\r\n        const route = domain + \"/login\"\r\n        await fetch(route,\r\n            {\r\n               method: 'POST',\r\n               headers : {\r\n                   'Content-Type': 'application/x-www-form-urlencoded',\r\n               },\r\n               credentials: 'include',\r\n               body: data\r\n            })\r\n        .then(async response => {\r\n            if(response.status === 200) {\r\n                history.push(\"/\")\r\n                return\r\n            }\r\n            response = await response.json()\r\n            Message.updateLoginMessage(response.message)\r\n            return \r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n        <form className = \"form\" id = \"login-form\" method=\"POST\">\r\n            <h3>Login</h3>\r\n            <div className='message'>{Message.MessageState.type === actions.update_login_message ? Message.MessageState.message : \"\"}</div>\r\n            <div>\r\n                <input ref={usernameInputElement} name = \"username\" placeholder = \"username\" type = \"text\"></input>\r\n                <input ref={passwordInputElement} autocomplete=\"off\" name = \"password\" placeholder = \"password\" type = \"password\"></input>\r\n                <input onClick={Login} value = \"Login\" type = \"button\"></input>\r\n            </div>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\nfunction Register() {\r\n    const usernameInputElement = useRef(null)\r\n    const passwordInputElement = useRef(null)\r\n    const verifyInputElement   = useRef(null)\r\n    const Message = useContext(MessageContext)\r\n    const registerForm = useRef(null)\r\n    const registerOnClick = (e) => {\r\n        registerForm.current.classList.add(\"active_aniamtion\");\r\n        registerForm.current.classList.remove(\"active_aniamtion_btn_login\");\r\n        registerForm.current.childNodes[0].classList.remove(\"select_btn\")\r\n    }\r\n    const loginBtnOnClick = (e) => {\r\n        registerForm.current.classList.add(\"active_aniamtion_btn_login\");\r\n        registerForm.current.classList.remove(\"active_aniamtion\");\r\n        registerForm.current.childNodes[0].classList.add(\"select_btn\")\r\n    }\r\n    const postRegister = async () => {\r\n        const userName = usernameInputElement.current.value\r\n        const password = passwordInputElement.current.value\r\n        const verifiPassword = verifyInputElement.current.value\r\n        passwordInputElement.current.value = \"\"\r\n        verifyInputElement.current.value = \"\"\r\n        if(password !== verifiPassword) {\r\n            Message.updateRegisterMessage(\"Confirm password must match\")\r\n            return\r\n        }\r\n        const userRegisterData = {\r\n            userName: userName,\r\n            password: password\r\n        }\r\n        const route = domain + \"/register\"\r\n        await fetch(route,\r\n            {\r\n               method: 'POST',\r\n               headers : {\r\n                   'Content-Type': 'application/json',\r\n               },\r\n               body: JSON.stringify(userRegisterData)\r\n            })\r\n        .then(async response => {\r\n            if(response.status === 200) {\r\n                Message.updateLoginMessage(\"Register succeed\")\r\n                loginBtnOnClick()\r\n                return\r\n            }\r\n            response = await response.json()\r\n            Message.updateRegisterMessage(response.message)\r\n            return\r\n        })\r\n    }\r\n    return (\r\n        <form ref = {registerForm} className = \"form active_aniamtion_btn_login\" id = \"register-form\">\r\n            <h3 className = \"select_btn\" onClick = {registerOnClick}>Register</h3>\r\n            <div className='message'>{Message.MessageState.type === actions.update_register_message ? Message.MessageState.message : \"\"}</div>\r\n            <div>\r\n                <input ref={usernameInputElement} name = \"username\" placeholder = \"username\" type = \"text\"></input>\r\n                <input ref={passwordInputElement} name = \"password\" placeholder = \"password\" type = \"password\"></input>\r\n                <input ref={verifyInputElement} name = \"verifypassword\" placeholder = \"verifi password\" type = \"password\"></input>\r\n                <input value = \"Register\" type = \"button\" onClick={postRegister}></input>\r\n                <div onClick = {loginBtnOnClick} id = \"btn-login\">\r\n                    Login i here  \r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nfunction LoginForm() {\r\n    const [MessageState, dispathMessageMethod] = useReducer(reducer, initialState)\r\n    const value = {\r\n        MessageState: MessageState,\r\n        updateLoginMessage : (LoginMessage) => {dispathMessageMethod({type: actions.update_login_message, message: LoginMessage})},\r\n        updateRegisterMessage: (RegisterMessage) => {dispathMessageMethod({type: actions.update_register_message, message: RegisterMessage})}\r\n    }\r\n    return (\r\n        <MessageContext.Provider value={value}>\r\n            <div id = \"form-container\">\r\n            <Login/>\r\n            <Register />\r\n            </ div>\r\n        </MessageContext.Provider>\r\n    )\r\n}\r\nexport default LoginForm ","import { useRef , useEffect, useState } from 'react'\r\nlet canvasSize = {\r\n    width: 250,\r\n    height: 250\r\n}\r\nlet mouse = {\r\n    x : canvasSize.width/2,\r\n    y : canvasSize.height/2\r\n} \r\nfunction Particle (x, y, radius, color, context, type, numberMobileCircle = 0){\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n    this.color  = color;\r\n    this.type = type\r\n    this.radians = Math.random() * Math.PI * 2;\r\n    if(numberMobileCircle === 0 && this.type === \"mobile\") {\r\n\r\n        this.radians = 0;\r\n    }\r\n    else if (numberMobileCircle === 1 && this.type === \"mobile\") {\r\n       \r\n        this.radians = Math.PI \r\n    }\r\n    this.velocity = ( this.type === \"pc\"  ? Math.PI / 2 : Math.PI/3);\r\n   \r\n    this.context = context\r\n    this.distanceFromCenter =  {\r\n        x: Math.random() * 10 + 70,\r\n        y: Math.random() * 10 + 70,\r\n    }\r\n    this.lastmouse = {\r\n        x : mouse.x,\r\n        y : mouse.y\r\n    }\r\n    this.date = new Date();\r\n    this.update = () => {\r\n        let frameDate = new Date();\r\n        \r\n        if(this.type === \"pc\"){\r\n        this.radians += this.velocity * (frameDate.getTime() - this.date.getTime()) / 1000;\r\n        this.lastmouse.x += (mouse.x - this.lastmouse.x ) * (frameDate.getTime() - this.date.getTime()) / 1000 * 0.5;\r\n        this.lastmouse.y += (mouse.y - this.lastmouse.y ) * (frameDate.getTime() - this.date.getTime()) / 1000 * 0.5;\r\n        // this.lastmouse.x += (mouse.x - this.lastmouse.x) * 0.05\r\n        this.x = this.lastmouse.x + Math.cos(this.radians) * this.distanceFromCenter.x;\r\n        this.y = this.lastmouse.y + Math.sin(this.radians) * this.distanceFromCenter.y;\r\n        }\r\n        else {\r\n            this.radians += (this.velocity/2) * (frameDate.getTime() - this.date.getTime()) / 1000;\r\n            // this.lastmouse.x += (mouse.x - this.lastmouse.x ) * (frameDate.getTime() - this.date.getTime()) / 1000 * 0.1;\r\n            // this.lastmouse.y += (mouse.y - this.lastmouse.y ) * (frameDate.getTime() - this.date.getTime()) / 1000 * 0.1;\r\n            // this.lastmouse.x += (mouse.x - this.lastmouse.x) * 0.05\r\n            // this.x = document.documentElement.clientWidth / 2+ Math.cos(this.radians) * (document.documentElement.clientWidth)*0.5*0.7;\r\n            this.x = document.documentElement.clientWidth * 0.7 / 2 + Math.cos(this.radians) * (document.documentElement.clientWidth * 0.7 / 2 - 20)\r\n            this.y = 25\r\n        }\r\n        this.draw()\r\n        this.date = new Date()\r\n    }\r\n    this.draw = () => {\r\n        this.context.beginPath();\r\n        if(this.type === \"pc\"){\r\n        this.context.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\r\n        }\r\n        else \r\n        this.context.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\r\n        this.context.fillStyle = this.color;\r\n        this.context.fill();\r\n        this.context.closePath();\r\n    }\r\n};\r\nconst Banner_Circle_Animation = (props) => {\r\n    const [rerender , setReRender] = useState(1)\r\n    mouse = {\r\n        x : canvasSize.width/2,\r\n        y : canvasSize.height/2\r\n    } \r\n    useEffect(() => {\r\n        if(props.screenType === \"pc\") {\r\n            canvasSize = {\r\n                width: 250,\r\n                height: 250\r\n            }\r\n        }\r\n        else {\r\n            canvasSize = {\r\n                width: 250,\r\n                height: 50\r\n            }\r\n        }\r\n        setReRender(previ => previ++)\r\n    }, [props])\r\n  \r\n    const canvasRef = useRef(null)\r\n    // color\r\n    const color = [\r\n        '#e0a80d',\r\n        '#bde00d',\r\n        '#53e00d',\r\n        '#0d26e0',\r\n        '#7e0de0',\r\n        '#e0a80d',\r\n        '#bde00d',\r\n        '#53e00d',\r\n        '#0d26e0',\r\n        '#7e0de0',\r\n        '#e0a80d',\r\n        '#bde00d',\r\n        '#53e00d',\r\n        '#0d26e0',\r\n        '#7e0de0',\r\n        '#e0a80d',\r\n        '#bde00d',\r\n        '#53e00d',\r\n        '#0d26e0',\r\n        '#7e0de0',\r\n    ]\r\n    const colorMobile = \"#8a8a8a\"\r\n    // partical\r\n\r\n    let particals;\r\n    let Init = () => {\r\n\r\n        particals = []\r\n        const canvas = canvasRef.current.getContext(\"2d\");\r\n        let numberCircle = 20;\r\n        if(props.screenType === \"pc\") {\r\n            numberCircle = 20;\r\n            for(let i = 0; i < numberCircle; i++) {\r\n                particals.push(new Particle(canvasSize.width /2, canvasSize.height / 2, (props.screenType === \"pc\" ? 3 : 15), color[i], canvas, props.screenType));\r\n            }\r\n        }\r\n        else {\r\n            numberCircle = 2;\r\n            for(let i = 0; i < numberCircle; i++) {\r\n                particals.push(new Particle(canvasSize.width /2, canvasSize.height / 2, (props.screenType === \"pc\" ? 3 : 15), colorMobile, canvas, props.screenType, i));\r\n            }\r\n        }\r\n      \r\n    }\r\n    var handlerAniamtionFrame;\r\n    const Animate = () => {\r\n        const canvas = canvasRef.current;\r\n        if(!canvas) return\r\n        const ctx = canvas.getContext('2d');\r\n        if(props.screenType === \"mobile\")\r\n        ctx.fillStyle = 'rgba(32, 32, 32,0.05)'\r\n        else \r\n        ctx.fillStyle = 'rgba(0, 0, 0,0.05)'\r\n        ctx.fillRect(0, 0, canvasSize.width, canvasSize.height);\r\n        particals.forEach(partical => {\r\n            partical.update()\r\n        })\r\n        handlerAniamtionFrame = window.requestAnimationFrame(Animate)\r\n    }\r\n    useEffect(() => {\r\n        window.addEventListener('mousemove', (e) => {\r\n            let temp = canvas.getBoundingClientRect()\r\n            if( e.x < temp.left   ||\r\n                e.x > temp.right  ||\r\n                e.y < temp.top    ||\r\n                e.y > temp.bottom) {\r\n                mouse.x = canvasSize.width/2;\r\n                mouse.y = canvasSize.height/2;\r\n            }\r\n        })\r\n\r\n        const canvas = canvasRef.current;\r\n        if(props.screenType === \"pc\") {\r\n        canvas.width = 250;\r\n        canvas.height = 250\r\n        canvasSize.width = 250;\r\n        canvasSize.height = 250\r\n        }\r\n        else {\r\n            canvas.width = document.documentElement.clientWidth * 0.7;\r\n            canvas.height = 50\r\n            canvasSize.width = canvas.width;\r\n            canvasSize.height = canvas.height\r\n        }\r\n        window.addEventListener('resize', () => {\r\n            if(props.screenType === \"pc\") {\r\n                canvas.width = 250;\r\n                canvas.height = 250\r\n                canvasSize.width = 250;\r\n                canvasSize.height = 250\r\n                }\r\n                else {\r\n                    canvas.width = document.documentElement.clientWidth * 0.7;\r\n                    canvas.height = 50\r\n                    canvasSize.width = canvas.width;\r\n                    canvasSize.height = canvas.height\r\n                }\r\n        } )\r\n        canvas.addEventListener('mousemove', (e) => {\r\n            mouse.x = e.x - canvas.getBoundingClientRect().left;\r\n            mouse.y = e.y - canvas.getBoundingClientRect().top;\r\n        })\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.clearRect(0,0, canvasSize.width, canvasSize.height)\r\n        Init(ctx)\r\n        handlerAniamtionFrame = requestAnimationFrame(Animate)\r\n        \r\n        return () =>  {\r\n            ctx.fillRect(0, 0, canvasSize.width, canvasSize.height);\r\n            cancelAnimationFrame(handlerAniamtionFrame)\r\n        }\r\n    },[props.screenType])\r\n    return (\r\n        <canvas ref = {canvasRef}></canvas>\r\n    )\r\n}\r\nexport default Banner_Circle_Animation","import \"./css/banner.css\"\r\nimport Banner_Circle_Animation from \"./banner_circle_animation\"\r\nfunction Banner(props) {\r\n    return (\r\n        <div id = \"banner\">\r\n            <p>\r\n                CHAT APP\r\n            </p>\r\n            <Banner_Circle_Animation  {...props} />\r\n        </div>\r\n    )\r\n}\r\nexport default Banner","import { useEffect, useState } from \"react\"\r\nimport LoginForm from \"./loginform\"\r\nimport Banner from \"./banner\"\r\nimport \"./css/login.css\"\r\nlet windowSize = {width : undefined,height: undefined}\r\nfunction Login() {\r\n    // state for store type of screen\r\n    const [type, setType] = useState()\r\n\r\n    /**\r\n     * function update type every time screen change\r\n     * \r\n     * screenWidth <= 700 px   display in mobile mode\r\n     * \r\n     * screenWidth > 700 px    display in pc mode\r\n     * \r\n     */\r\n    const updateType = () => {\r\n        windowSize.width = document.documentElement.clientWidth\r\n        windowSize.height = document.documentElement.clientHeight\r\n        if((windowSize.width <= 700 || windowSize.height <= 400)  ){ \r\n            setType(\"mobile\")\r\n        }\r\n        else if ((windowSize.width > 700 || windowSize.height > 400)){    \r\n            setType(\"pc\")\r\n        }\r\n        \r\n    } \r\n    useEffect(() => {\r\n        updateType();\r\n        window.addEventListener('resize',updateType)\r\n        return () => {\r\n            window.removeEventListener('resize', updateType)\r\n        }\r\n    }, [])\r\n    return (\r\n        <section id = \"login-section\">\r\n            <Banner screenType = {type} />\r\n            <LoginForm/>\r\n        </section>\r\n    )\r\n\r\n}\r\nexport {Login}","import { ChatApp } from './components/chatapp/chatbox'\r\nimport { Login } from './components/Login/login'\r\nimport {\r\n    BrowserRouter,\r\n    Switch,\r\n    Route,\r\n  } from \"react-router-dom\";\r\nimport './app.css'\r\nfunction App() {\r\n    return (\r\n        // <ChatApp></ChatApp>\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path = \"/\" component = {ChatApp} exact />\r\n                <Route path = \"/login\" component = {Login} exact />\r\n            </Switch>\r\n          \r\n        </BrowserRouter>\r\n       \r\n    )\r\n}\r\n\r\nexport {App}","\r\nimport ReactDom from 'react-dom';\r\nimport { App }  from \"./App\"\r\nReactDom.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}